
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND AS ASSIGN BLOCK_COMMENT BOOL BREAK CASE CLASS COLON COMMA COMPOSED_ASSIGN CONST CONTINUE DECREMENT DEFAULT DIVIDE DO DOC_COMMENT DOT DOUBLE DYNAMIC ELSE EQUALS EXTENDS FALSE FINAL FLOAT FOR GRAPH GREATER_EQ GREATER_THAN HASH IF IMPLEMENTS INCREMENT INTEGER INTEGER_DIVIDE INTERFACE IS IS_NOT LBRACE LESS_EQ LESS_THAN LINE_COMMENT LIST LPAREN LSQUARE MAP MINUS MODULE NEGATION NOT_EQUALS NULL NULL_ASSIGN NUMBER OBJECT OR PLUS PRINT PRIVATE PROTECTED PUBLIC QUEUE RBRACE RPAREN RSQUARE SEMICOLON SET STACK STRING STRING_LITERAL SWITCH TIMES TREE TRUE VARIABLE VOID WHILEprogram : statementsstatements : statements statement\n                  | statementstatement : var_declaration\n                 | data_structure\n                 | control_structurevar_declaration : VARIABLE ASSIGN expression SEMICOLON\n                       | VARIABLE NULL_ASSIGN expression SEMICOLONvar_declaration : type VARIABLE ASSIGN expression SEMICOLONvar_declaration : bool_type VARIABLE ASSIGN bool_expression SEMICOLONvar_declaration : num_type VARIABLE ASSIGN num_expression SEMICOLONtype : VOID\n            | STRING\n            | LIST\n            | SET\n            | MAP\n            | STACK\n            | QUEUE\n            | TREE\n            | GRAPHbool_type : BOOLnum_type : FLOAT\n                | INTEGER\n                | DOUBLEexpression : bool_expressionexpression : num_expressionexpression : VARIABLEbool_expression : TRUE\n                        | FALSEnum_expression : NUMBER\n                    | INTEGER\n                    | FLOATbool_expression : NEGATION bool_expression\n                      | bool_expression AND bool_expression\n                      | bool_expression OR bool_expressionnum_expression : num_expression PLUS num_expression\n                      | num_expression MINUS num_expression\n                      | num_expression TIMES num_expression\n                      | num_expression DIVIDE num_expression\n                      | num_expression INTEGER_DIVIDE num_expression\n                      | num_expression MODULE num_expressionbool_expression : LPAREN bool_expression RPARENnum_expression : LPAREN num_expression RPARENdata_structure : list_structure\n                      | map_structurelist_structure : LSQUARE elements RSQUAREmap_structure : LBRACE key_value_pairs RBRACEelements : elements COMMA expression\n                | expressionkey_value_pairs : key_value_pairs COMMA key_value\n                       | key_valuekey_value : expression COLON expressioncontrol_structure : if_structure\n                        | switch_structureif_structure : IF LPAREN condition RPAREN LBRACE statement RBRACEswitch_structure : SWITCH LPAREN expression RPAREN LBRACE cases default RBRACEcondition : expression GREATER_THAN expression\n                 | expression LESS_THAN expression\n                 | expression GREATER_EQ expression\n                 | expression LESS_EQ expression\n                 | expression EQUALS expression\n                 | expression NOT_EQUALS expressioncases : cases case\n             | casecase : CASE NUMBER COLON statement BREAK SEMICOLONdefault : DEFAULT COLON statement\n               | emptyempty :'
    
_lr_action_items = {'VARIABLE':([0,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,32,33,34,53,54,57,60,61,74,75,76,80,81,100,101,102,103,104,105,107,108,109,110,122,128,129,130,],[7,7,-3,-4,-5,-6,35,36,37,-44,-45,-53,-54,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,42,42,-2,42,42,42,42,42,-46,42,-47,42,42,-7,-8,42,42,42,42,42,42,-9,-10,-11,7,-55,-56,7,7,]),'VOID':([0,2,3,4,5,6,11,12,13,14,32,60,74,80,81,107,108,109,110,122,128,129,130,],[15,15,-3,-4,-5,-6,-44,-45,-53,-54,-2,-46,-47,-7,-8,-9,-10,-11,15,-55,-56,15,15,]),'STRING':([0,2,3,4,5,6,11,12,13,14,32,60,74,80,81,107,108,109,110,122,128,129,130,],[16,16,-3,-4,-5,-6,-44,-45,-53,-54,-2,-46,-47,-7,-8,-9,-10,-11,16,-55,-56,16,16,]),'LIST':([0,2,3,4,5,6,11,12,13,14,32,60,74,80,81,107,108,109,110,122,128,129,130,],[17,17,-3,-4,-5,-6,-44,-45,-53,-54,-2,-46,-47,-7,-8,-9,-10,-11,17,-55,-56,17,17,]),'SET':([0,2,3,4,5,6,11,12,13,14,32,60,74,80,81,107,108,109,110,122,128,129,130,],[18,18,-3,-4,-5,-6,-44,-45,-53,-54,-2,-46,-47,-7,-8,-9,-10,-11,18,-55,-56,18,18,]),'MAP':([0,2,3,4,5,6,11,12,13,14,32,60,74,80,81,107,108,109,110,122,128,129,130,],[19,19,-3,-4,-5,-6,-44,-45,-53,-54,-2,-46,-47,-7,-8,-9,-10,-11,19,-55,-56,19,19,]),'STACK':([0,2,3,4,5,6,11,12,13,14,32,60,74,80,81,107,108,109,110,122,128,129,130,],[20,20,-3,-4,-5,-6,-44,-45,-53,-54,-2,-46,-47,-7,-8,-9,-10,-11,20,-55,-56,20,20,]),'QUEUE':([0,2,3,4,5,6,11,12,13,14,32,60,74,80,81,107,108,109,110,122,128,129,130,],[21,21,-3,-4,-5,-6,-44,-45,-53,-54,-2,-46,-47,-7,-8,-9,-10,-11,21,-55,-56,21,21,]),'TREE':([0,2,3,4,5,6,11,12,13,14,32,60,74,80,81,107,108,109,110,122,128,129,130,],[22,22,-3,-4,-5,-6,-44,-45,-53,-54,-2,-46,-47,-7,-8,-9,-10,-11,22,-55,-56,22,22,]),'GRAPH':([0,2,3,4,5,6,11,12,13,14,32,60,74,80,81,107,108,109,110,122,128,129,130,],[23,23,-3,-4,-5,-6,-44,-45,-53,-54,-2,-46,-47,-7,-8,-9,-10,-11,23,-55,-56,23,23,]),'BOOL':([0,2,3,4,5,6,11,12,13,14,32,60,74,80,81,107,108,109,110,122,128,129,130,],[24,24,-3,-4,-5,-6,-44,-45,-53,-54,-2,-46,-47,-7,-8,-9,-10,-11,24,-55,-56,24,24,]),'FLOAT':([0,2,3,4,5,6,11,12,13,14,28,29,32,33,34,46,53,54,57,59,60,61,64,65,66,67,68,69,74,75,76,80,81,85,100,101,102,103,104,105,107,108,109,110,122,128,129,130,],[25,25,-3,-4,-5,-6,-44,-45,-53,-54,49,49,-2,49,49,49,49,49,49,49,-46,49,49,49,49,49,49,49,-47,49,49,-7,-8,49,49,49,49,49,49,49,-9,-10,-11,25,-55,-56,25,25,]),'INTEGER':([0,2,3,4,5,6,11,12,13,14,28,29,32,33,34,46,53,54,57,59,60,61,64,65,66,67,68,69,74,75,76,80,81,85,100,101,102,103,104,105,107,108,109,110,122,128,129,130,],[26,26,-3,-4,-5,-6,-44,-45,-53,-54,48,48,-2,48,48,48,48,48,48,48,-46,48,48,48,48,48,48,48,-47,48,48,-7,-8,48,48,48,48,48,48,48,-9,-10,-11,26,-55,-56,26,26,]),'DOUBLE':([0,2,3,4,5,6,11,12,13,14,32,60,74,80,81,107,108,109,110,122,128,129,130,],[27,27,-3,-4,-5,-6,-44,-45,-53,-54,-2,-46,-47,-7,-8,-9,-10,-11,27,-55,-56,27,27,]),'LSQUARE':([0,2,3,4,5,6,11,12,13,14,32,60,74,80,81,107,108,109,110,122,128,129,130,],[28,28,-3,-4,-5,-6,-44,-45,-53,-54,-2,-46,-47,-7,-8,-9,-10,-11,28,-55,-56,28,28,]),'LBRACE':([0,2,3,4,5,6,11,12,13,14,32,60,74,80,81,99,106,107,108,109,110,122,128,129,130,],[29,29,-3,-4,-5,-6,-44,-45,-53,-54,-2,-46,-47,-7,-8,110,117,-9,-10,-11,29,-55,-56,29,29,]),'IF':([0,2,3,4,5,6,11,12,13,14,32,60,74,80,81,107,108,109,110,122,128,129,130,],[30,30,-3,-4,-5,-6,-44,-45,-53,-54,-2,-46,-47,-7,-8,-9,-10,-11,30,-55,-56,30,30,]),'SWITCH':([0,2,3,4,5,6,11,12,13,14,32,60,74,80,81,107,108,109,110,122,128,129,130,],[31,31,-3,-4,-5,-6,-44,-45,-53,-54,-2,-46,-47,-7,-8,-9,-10,-11,31,-55,-56,31,31,]),'$end':([1,2,3,4,5,6,11,12,13,14,32,60,74,80,81,107,108,109,122,128,],[0,-1,-3,-4,-5,-6,-44,-45,-53,-54,-2,-46,-47,-7,-8,-9,-10,-11,-55,-56,]),'RBRACE':([4,5,6,11,12,13,14,40,41,42,43,44,47,48,49,50,51,60,70,74,80,81,87,88,89,90,91,92,93,94,95,96,97,98,107,108,109,118,119,120,122,123,124,126,128,131,134,],[-4,-5,-6,-44,-45,-53,-54,-25,-26,-27,-28,-29,-30,-31,-32,74,-51,-46,-33,-47,-7,-8,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-52,-9,-10,-11,122,-68,-64,-55,128,-63,-67,-56,-66,-65,]),'BREAK':([4,5,6,11,12,13,14,60,74,80,81,107,108,109,122,128,132,],[-4,-5,-6,-44,-45,-53,-54,-46,-47,-7,-8,-9,-10,-11,-55,-56,133,]),'ASSIGN':([7,35,36,37,],[33,57,58,59,]),'NULL_ASSIGN':([7,],[34,]),'TRUE':([28,29,33,34,45,46,53,54,57,58,61,62,63,71,75,76,100,101,102,103,104,105,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'FALSE':([28,29,33,34,45,46,53,54,57,58,61,62,63,71,75,76,100,101,102,103,104,105,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'NEGATION':([28,29,33,34,45,46,53,54,57,58,61,62,63,71,75,76,100,101,102,103,104,105,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'LPAREN':([28,29,30,31,33,34,45,46,53,54,57,58,59,61,62,63,64,65,66,67,68,69,71,75,76,85,100,101,102,103,104,105,],[46,46,53,54,46,46,71,46,46,46,46,71,85,46,71,71,85,85,85,85,85,85,71,46,46,85,46,46,46,46,46,46,]),'NUMBER':([28,29,33,34,46,53,54,57,59,61,64,65,66,67,68,69,75,76,85,100,101,102,103,104,105,121,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,127,]),'RSQUARE':([38,39,40,41,42,43,44,47,48,49,70,86,87,88,89,90,91,92,93,94,95,96,],[60,-49,-25,-26,-27,-28,-29,-30,-31,-32,-33,-48,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,]),'COMMA':([38,39,40,41,42,43,44,47,48,49,50,51,70,86,87,88,89,90,91,92,93,94,95,96,97,98,],[61,-49,-25,-26,-27,-28,-29,-30,-31,-32,75,-51,-33,-48,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-50,-52,]),'COLON':([40,41,42,43,44,47,48,49,52,70,87,88,89,90,91,92,93,94,95,96,125,127,],[-25,-26,-27,-28,-29,-30,-31,-32,76,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,129,130,]),'SEMICOLON':([40,41,42,43,44,47,48,49,55,56,70,82,83,84,87,88,89,90,91,92,93,94,95,96,133,],[-25,-26,-27,-28,-29,-30,-31,-32,80,81,-33,107,108,109,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,134,]),'GREATER_THAN':([40,41,42,43,44,47,48,49,70,78,87,88,89,90,91,92,93,94,95,96,],[-25,-26,-27,-28,-29,-30,-31,-32,-33,100,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,]),'LESS_THAN':([40,41,42,43,44,47,48,49,70,78,87,88,89,90,91,92,93,94,95,96,],[-25,-26,-27,-28,-29,-30,-31,-32,-33,101,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,]),'GREATER_EQ':([40,41,42,43,44,47,48,49,70,78,87,88,89,90,91,92,93,94,95,96,],[-25,-26,-27,-28,-29,-30,-31,-32,-33,102,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,]),'LESS_EQ':([40,41,42,43,44,47,48,49,70,78,87,88,89,90,91,92,93,94,95,96,],[-25,-26,-27,-28,-29,-30,-31,-32,-33,103,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,]),'EQUALS':([40,41,42,43,44,47,48,49,70,78,87,88,89,90,91,92,93,94,95,96,],[-25,-26,-27,-28,-29,-30,-31,-32,-33,104,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,]),'NOT_EQUALS':([40,41,42,43,44,47,48,49,70,78,87,88,89,90,91,92,93,94,95,96,],[-25,-26,-27,-28,-29,-30,-31,-32,-33,105,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,]),'RPAREN':([40,41,42,43,44,47,48,49,70,72,73,77,79,87,88,89,90,91,92,93,94,95,96,111,112,113,114,115,116,],[-25,-26,-27,-28,-29,-30,-31,-32,-33,95,96,99,106,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-57,-58,-59,-60,-61,-62,]),'AND':([40,43,44,70,72,83,87,88,95,],[62,-28,-29,62,62,62,62,62,-42,]),'OR':([40,43,44,70,72,83,87,88,95,],[63,-28,-29,63,63,63,63,63,-42,]),'PLUS':([41,47,48,49,73,84,89,90,91,92,93,94,96,],[64,-30,-31,-32,64,64,64,64,64,64,64,64,-43,]),'MINUS':([41,47,48,49,73,84,89,90,91,92,93,94,96,],[65,-30,-31,-32,65,65,65,65,65,65,65,65,-43,]),'TIMES':([41,47,48,49,73,84,89,90,91,92,93,94,96,],[66,-30,-31,-32,66,66,66,66,66,66,66,66,-43,]),'DIVIDE':([41,47,48,49,73,84,89,90,91,92,93,94,96,],[67,-30,-31,-32,67,67,67,67,67,67,67,67,-43,]),'INTEGER_DIVIDE':([41,47,48,49,73,84,89,90,91,92,93,94,96,],[68,-30,-31,-32,68,68,68,68,68,68,68,68,-43,]),'MODULE':([41,47,48,49,73,84,89,90,91,92,93,94,96,],[69,-30,-31,-32,69,69,69,69,69,69,69,69,-43,]),'CASE':([117,119,120,124,134,],[121,121,-64,-63,-65,]),'DEFAULT':([119,120,124,134,],[125,-64,-63,-65,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,],[2,]),'statement':([0,2,110,129,130,],[3,32,118,131,132,]),'var_declaration':([0,2,110,129,130,],[4,4,4,4,4,]),'data_structure':([0,2,110,129,130,],[5,5,5,5,5,]),'control_structure':([0,2,110,129,130,],[6,6,6,6,6,]),'type':([0,2,110,129,130,],[8,8,8,8,8,]),'bool_type':([0,2,110,129,130,],[9,9,9,9,9,]),'num_type':([0,2,110,129,130,],[10,10,10,10,10,]),'list_structure':([0,2,110,129,130,],[11,11,11,11,11,]),'map_structure':([0,2,110,129,130,],[12,12,12,12,12,]),'if_structure':([0,2,110,129,130,],[13,13,13,13,13,]),'switch_structure':([0,2,110,129,130,],[14,14,14,14,14,]),'elements':([28,],[38,]),'expression':([28,29,33,34,53,54,57,61,75,76,100,101,102,103,104,105,],[39,52,55,56,78,79,82,86,52,98,111,112,113,114,115,116,]),'bool_expression':([28,29,33,34,45,46,53,54,57,58,61,62,63,71,75,76,100,101,102,103,104,105,],[40,40,40,40,70,72,40,40,40,83,40,87,88,72,40,40,40,40,40,40,40,40,]),'num_expression':([28,29,33,34,46,53,54,57,59,61,64,65,66,67,68,69,75,76,85,100,101,102,103,104,105,],[41,41,41,41,73,41,41,41,84,41,89,90,91,92,93,94,41,41,73,41,41,41,41,41,41,]),'key_value_pairs':([29,],[50,]),'key_value':([29,75,],[51,97,]),'condition':([53,],[77,]),'cases':([117,],[119,]),'case':([117,119,],[120,124,]),'default':([119,],[123,]),'empty':([119,],[126,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','AnalizadorSintactico.py',8),
  ('statements -> statements statement','statements',2,'p_statements','AnalizadorSintactico.py',13),
  ('statements -> statement','statements',1,'p_statements','AnalizadorSintactico.py',14),
  ('statement -> var_declaration','statement',1,'p_statement','AnalizadorSintactico.py',23),
  ('statement -> data_structure','statement',1,'p_statement','AnalizadorSintactico.py',24),
  ('statement -> control_structure','statement',1,'p_statement','AnalizadorSintactico.py',25),
  ('var_declaration -> VARIABLE ASSIGN expression SEMICOLON','var_declaration',4,'p_var_declaration','AnalizadorSintactico.py',31),
  ('var_declaration -> VARIABLE NULL_ASSIGN expression SEMICOLON','var_declaration',4,'p_var_declaration','AnalizadorSintactico.py',32),
  ('var_declaration -> type VARIABLE ASSIGN expression SEMICOLON','var_declaration',5,'p_var_declaration_with_type','AnalizadorSintactico.py',37),
  ('var_declaration -> bool_type VARIABLE ASSIGN bool_expression SEMICOLON','var_declaration',5,'p_var_declaration_with_bool_type','AnalizadorSintactico.py',42),
  ('var_declaration -> num_type VARIABLE ASSIGN num_expression SEMICOLON','var_declaration',5,'p_var_declaration_with_num_type','AnalizadorSintactico.py',47),
  ('type -> VOID','type',1,'p_type','AnalizadorSintactico.py',52),
  ('type -> STRING','type',1,'p_type','AnalizadorSintactico.py',53),
  ('type -> LIST','type',1,'p_type','AnalizadorSintactico.py',54),
  ('type -> SET','type',1,'p_type','AnalizadorSintactico.py',55),
  ('type -> MAP','type',1,'p_type','AnalizadorSintactico.py',56),
  ('type -> STACK','type',1,'p_type','AnalizadorSintactico.py',57),
  ('type -> QUEUE','type',1,'p_type','AnalizadorSintactico.py',58),
  ('type -> TREE','type',1,'p_type','AnalizadorSintactico.py',59),
  ('type -> GRAPH','type',1,'p_type','AnalizadorSintactico.py',60),
  ('bool_type -> BOOL','bool_type',1,'p_bool_type','AnalizadorSintactico.py',65),
  ('num_type -> FLOAT','num_type',1,'p_num_type','AnalizadorSintactico.py',70),
  ('num_type -> INTEGER','num_type',1,'p_num_type','AnalizadorSintactico.py',71),
  ('num_type -> DOUBLE','num_type',1,'p_num_type','AnalizadorSintactico.py',72),
  ('expression -> bool_expression','expression',1,'p_b_expression','AnalizadorSintactico.py',78),
  ('expression -> num_expression','expression',1,'p_n_expression','AnalizadorSintactico.py',84),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','AnalizadorSintactico.py',89),
  ('bool_expression -> TRUE','bool_expression',1,'p_expression_boolean','AnalizadorSintactico.py',94),
  ('bool_expression -> FALSE','bool_expression',1,'p_expression_boolean','AnalizadorSintactico.py',95),
  ('num_expression -> NUMBER','num_expression',1,'p_expression_numeric','AnalizadorSintactico.py',100),
  ('num_expression -> INTEGER','num_expression',1,'p_expression_numeric','AnalizadorSintactico.py',101),
  ('num_expression -> FLOAT','num_expression',1,'p_expression_numeric','AnalizadorSintactico.py',102),
  ('bool_expression -> NEGATION bool_expression','bool_expression',2,'p_bool_expression','AnalizadorSintactico.py',107),
  ('bool_expression -> bool_expression AND bool_expression','bool_expression',3,'p_bool_expression','AnalizadorSintactico.py',108),
  ('bool_expression -> bool_expression OR bool_expression','bool_expression',3,'p_bool_expression','AnalizadorSintactico.py',109),
  ('num_expression -> num_expression PLUS num_expression','num_expression',3,'p_num_expression','AnalizadorSintactico.py',114),
  ('num_expression -> num_expression MINUS num_expression','num_expression',3,'p_num_expression','AnalizadorSintactico.py',115),
  ('num_expression -> num_expression TIMES num_expression','num_expression',3,'p_num_expression','AnalizadorSintactico.py',116),
  ('num_expression -> num_expression DIVIDE num_expression','num_expression',3,'p_num_expression','AnalizadorSintactico.py',117),
  ('num_expression -> num_expression INTEGER_DIVIDE num_expression','num_expression',3,'p_num_expression','AnalizadorSintactico.py',118),
  ('num_expression -> num_expression MODULE num_expression','num_expression',3,'p_num_expression','AnalizadorSintactico.py',119),
  ('bool_expression -> LPAREN bool_expression RPAREN','bool_expression',3,'p_bool_expression_group','AnalizadorSintactico.py',124),
  ('num_expression -> LPAREN num_expression RPAREN','num_expression',3,'p_num_expression_group','AnalizadorSintactico.py',129),
  ('data_structure -> list_structure','data_structure',1,'p_data_structure','AnalizadorSintactico.py',135),
  ('data_structure -> map_structure','data_structure',1,'p_data_structure','AnalizadorSintactico.py',136),
  ('list_structure -> LSQUARE elements RSQUARE','list_structure',3,'p_list_structure','AnalizadorSintactico.py',141),
  ('map_structure -> LBRACE key_value_pairs RBRACE','map_structure',3,'p_map_structure','AnalizadorSintactico.py',146),
  ('elements -> elements COMMA expression','elements',3,'p_elements','AnalizadorSintactico.py',151),
  ('elements -> expression','elements',1,'p_elements','AnalizadorSintactico.py',152),
  ('key_value_pairs -> key_value_pairs COMMA key_value','key_value_pairs',3,'p_key_value_pairs','AnalizadorSintactico.py',160),
  ('key_value_pairs -> key_value','key_value_pairs',1,'p_key_value_pairs','AnalizadorSintactico.py',161),
  ('key_value -> expression COLON expression','key_value',3,'p_key_value','AnalizadorSintactico.py',169),
  ('control_structure -> if_structure','control_structure',1,'p_control_structure','AnalizadorSintactico.py',175),
  ('control_structure -> switch_structure','control_structure',1,'p_control_structure','AnalizadorSintactico.py',176),
  ('if_structure -> IF LPAREN condition RPAREN LBRACE statement RBRACE','if_structure',7,'p_if','AnalizadorSintactico.py',181),
  ('switch_structure -> SWITCH LPAREN expression RPAREN LBRACE cases default RBRACE','switch_structure',8,'p_switch','AnalizadorSintactico.py',186),
  ('condition -> expression GREATER_THAN expression','condition',3,'p_condition','AnalizadorSintactico.py',191),
  ('condition -> expression LESS_THAN expression','condition',3,'p_condition','AnalizadorSintactico.py',192),
  ('condition -> expression GREATER_EQ expression','condition',3,'p_condition','AnalizadorSintactico.py',193),
  ('condition -> expression LESS_EQ expression','condition',3,'p_condition','AnalizadorSintactico.py',194),
  ('condition -> expression EQUALS expression','condition',3,'p_condition','AnalizadorSintactico.py',195),
  ('condition -> expression NOT_EQUALS expression','condition',3,'p_condition','AnalizadorSintactico.py',196),
  ('cases -> cases case','cases',2,'p_cases','AnalizadorSintactico.py',201),
  ('cases -> case','cases',1,'p_cases','AnalizadorSintactico.py',202),
  ('case -> CASE NUMBER COLON statement BREAK SEMICOLON','case',6,'p_case','AnalizadorSintactico.py',209),
  ('default -> DEFAULT COLON statement','default',3,'p_default','AnalizadorSintactico.py',213),
  ('default -> empty','default',1,'p_default','AnalizadorSintactico.py',214),
  ('empty -> <empty>','empty',0,'p_empty','AnalizadorSintactico.py',221),
]
