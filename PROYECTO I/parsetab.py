
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND AS ASSIGN BLOCK_COMMENT BOOL BREAK CLASS COLON COMMA COMPOSED_ASSIGN CONST CONTINUE DECREMENT DIVIDE DO DOC_COMMENT DOT DOUBLE DYNAMIC ELSE EQUALS EXTENDS FALSE FINAL FLOAT FOR GRAPH GREATER_EQ GREATER_THAN HASH IF IMPLEMENTS INCREMENT INTEGER INTEGER_DIVIDE INTERFACE IS IS_NOT LBRACE LESS_EQ LESS_THAN LINE_COMMENT LIST LPAREN LSQUARE MAP MINUS MODULE NEGATION NOT_EQUALS NULL NULL_ASSIGN NUMBER OBJECT OR PLUS PRINT PRIVATE PROTECTED PUBLIC QUEUE RBRACE RPAREN RSQUARE SEMICOLON SET STACK STRING STRING_LITERAL TIMES TREE TRUE VARIABLE VOID WHILEprogram : statementsstatements : statements statement\n                  | statementstatement : var_declaration\n                 | data_structurevar_declaration : VARIABLE ASSIGN expression SEMICOLON\n                       | VARIABLE NULL_ASSIGN expression SEMICOLONvar_declaration : type VARIABLE ASSIGN expression SEMICOLONvar_declaration : bool_type VARIABLE ASSIGN bool_expression SEMICOLONvar_declaration : num_type VARIABLE ASSIGN num_expression SEMICOLONtype : VOID\n            | STRING\n            | LIST\n            | SET\n            | MAP\n            | STACK\n            | QUEUE\n            | TREE\n            | GRAPHbool_type : BOOLnum_type : FLOAT\n                | INTEGER\n                | DOUBLEexpression : bool_expressionexpression : num_expressionexpression : VARIABLEbool_expression : TRUE\n                        | FALSEnum_expression : NUMBER\n                    | INTEGER\n                    | FLOATbool_expression : NEGATION bool_expression\n                      | bool_expression AND bool_expression\n                      | bool_expression OR bool_expressionnum_expression : num_expression PLUS num_expression\n                      | num_expression MINUS num_expression\n                      | num_expression TIMES num_expression\n                      | num_expression DIVIDE num_expression\n                      | num_expression INTEGER_DIVIDE num_expression\n                      | num_expression MODULE num_expressionbool_expression : LPAREN bool_expression RPARENnum_expression : LPAREN num_expression RPARENdata_structure : list_structure\n                      | map_structurelist_structure : LSQUARE elements RSQUAREmap_structure : LBRACE key_value_pairs RBRACEelements : elements COMMA expression\n                | expressionkey_value_pairs : key_value_pairs COMMA key_value\n                       | key_valuekey_value : expression COLON expression'
    
_lr_action_items = {'VARIABLE':([0,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,50,53,54,67,68,69,70,71,89,90,91,],[6,6,-3,-4,-5,30,31,32,-43,-44,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,37,37,-2,37,37,37,-45,37,-46,37,37,-6,-7,-8,-9,-10,]),'VOID':([0,2,3,4,5,10,11,27,53,67,70,71,89,90,91,],[12,12,-3,-4,-5,-43,-44,-2,-45,-46,-6,-7,-8,-9,-10,]),'STRING':([0,2,3,4,5,10,11,27,53,67,70,71,89,90,91,],[13,13,-3,-4,-5,-43,-44,-2,-45,-46,-6,-7,-8,-9,-10,]),'LIST':([0,2,3,4,5,10,11,27,53,67,70,71,89,90,91,],[14,14,-3,-4,-5,-43,-44,-2,-45,-46,-6,-7,-8,-9,-10,]),'SET':([0,2,3,4,5,10,11,27,53,67,70,71,89,90,91,],[15,15,-3,-4,-5,-43,-44,-2,-45,-46,-6,-7,-8,-9,-10,]),'MAP':([0,2,3,4,5,10,11,27,53,67,70,71,89,90,91,],[16,16,-3,-4,-5,-43,-44,-2,-45,-46,-6,-7,-8,-9,-10,]),'STACK':([0,2,3,4,5,10,11,27,53,67,70,71,89,90,91,],[17,17,-3,-4,-5,-43,-44,-2,-45,-46,-6,-7,-8,-9,-10,]),'QUEUE':([0,2,3,4,5,10,11,27,53,67,70,71,89,90,91,],[18,18,-3,-4,-5,-43,-44,-2,-45,-46,-6,-7,-8,-9,-10,]),'TREE':([0,2,3,4,5,10,11,27,53,67,70,71,89,90,91,],[19,19,-3,-4,-5,-43,-44,-2,-45,-46,-6,-7,-8,-9,-10,]),'GRAPH':([0,2,3,4,5,10,11,27,53,67,70,71,89,90,91,],[20,20,-3,-4,-5,-43,-44,-2,-45,-46,-6,-7,-8,-9,-10,]),'BOOL':([0,2,3,4,5,10,11,27,53,67,70,71,89,90,91,],[21,21,-3,-4,-5,-43,-44,-2,-45,-46,-6,-7,-8,-9,-10,]),'FLOAT':([0,2,3,4,5,10,11,25,26,27,28,29,41,50,52,53,54,57,58,59,60,61,62,67,68,69,70,71,75,89,90,91,],[22,22,-3,-4,-5,-43,-44,44,44,-2,44,44,44,44,44,-45,44,44,44,44,44,44,44,-46,44,44,-6,-7,44,-8,-9,-10,]),'INTEGER':([0,2,3,4,5,10,11,25,26,27,28,29,41,50,52,53,54,57,58,59,60,61,62,67,68,69,70,71,75,89,90,91,],[23,23,-3,-4,-5,-43,-44,43,43,-2,43,43,43,43,43,-45,43,43,43,43,43,43,43,-46,43,43,-6,-7,43,-8,-9,-10,]),'DOUBLE':([0,2,3,4,5,10,11,27,53,67,70,71,89,90,91,],[24,24,-3,-4,-5,-43,-44,-2,-45,-46,-6,-7,-8,-9,-10,]),'LSQUARE':([0,2,3,4,5,10,11,27,53,67,70,71,89,90,91,],[25,25,-3,-4,-5,-43,-44,-2,-45,-46,-6,-7,-8,-9,-10,]),'LBRACE':([0,2,3,4,5,10,11,27,53,67,70,71,89,90,91,],[26,26,-3,-4,-5,-43,-44,-2,-45,-46,-6,-7,-8,-9,-10,]),'$end':([1,2,3,4,5,10,11,27,53,67,70,71,89,90,91,],[0,-1,-3,-4,-5,-43,-44,-2,-45,-46,-6,-7,-8,-9,-10,]),'ASSIGN':([6,30,31,32,],[28,50,51,52,]),'NULL_ASSIGN':([6,],[29,]),'TRUE':([25,26,28,29,40,41,50,51,54,55,56,64,68,69,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'FALSE':([25,26,28,29,40,41,50,51,54,55,56,64,68,69,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'NEGATION':([25,26,28,29,40,41,50,51,54,55,56,64,68,69,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'LPAREN':([25,26,28,29,40,41,50,51,52,54,55,56,57,58,59,60,61,62,64,68,69,75,],[41,41,41,41,64,41,41,64,75,41,64,64,75,75,75,75,75,75,64,41,41,75,]),'NUMBER':([25,26,28,29,41,50,52,54,57,58,59,60,61,62,68,69,75,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'RSQUARE':([33,34,35,36,37,38,39,42,43,44,63,76,77,78,79,80,81,82,83,84,85,86,],[53,-48,-24,-25,-26,-27,-28,-29,-30,-31,-32,-47,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,]),'COMMA':([33,34,35,36,37,38,39,42,43,44,45,46,63,76,77,78,79,80,81,82,83,84,85,86,87,88,],[54,-48,-24,-25,-26,-27,-28,-29,-30,-31,68,-50,-32,-47,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-49,-51,]),'COLON':([35,36,37,38,39,42,43,44,47,63,77,78,79,80,81,82,83,84,85,86,],[-24,-25,-26,-27,-28,-29,-30,-31,69,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,]),'SEMICOLON':([35,36,37,38,39,42,43,44,48,49,63,72,73,74,77,78,79,80,81,82,83,84,85,86,],[-24,-25,-26,-27,-28,-29,-30,-31,70,71,-32,89,90,91,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,]),'RBRACE':([35,36,37,38,39,42,43,44,45,46,63,77,78,79,80,81,82,83,84,85,86,87,88,],[-24,-25,-26,-27,-28,-29,-30,-31,67,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-49,-51,]),'AND':([35,38,39,63,65,73,77,78,85,],[55,-27,-28,55,55,55,55,55,-41,]),'OR':([35,38,39,63,65,73,77,78,85,],[56,-27,-28,56,56,56,56,56,-41,]),'PLUS':([36,42,43,44,66,74,79,80,81,82,83,84,86,],[57,-29,-30,-31,57,57,57,57,57,57,57,57,-42,]),'MINUS':([36,42,43,44,66,74,79,80,81,82,83,84,86,],[58,-29,-30,-31,58,58,58,58,58,58,58,58,-42,]),'TIMES':([36,42,43,44,66,74,79,80,81,82,83,84,86,],[59,-29,-30,-31,59,59,59,59,59,59,59,59,-42,]),'DIVIDE':([36,42,43,44,66,74,79,80,81,82,83,84,86,],[60,-29,-30,-31,60,60,60,60,60,60,60,60,-42,]),'INTEGER_DIVIDE':([36,42,43,44,66,74,79,80,81,82,83,84,86,],[61,-29,-30,-31,61,61,61,61,61,61,61,61,-42,]),'MODULE':([36,42,43,44,66,74,79,80,81,82,83,84,86,],[62,-29,-30,-31,62,62,62,62,62,62,62,62,-42,]),'RPAREN':([38,39,42,43,44,63,65,66,77,78,79,80,81,82,83,84,85,86,],[-27,-28,-29,-30,-31,-32,85,86,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,],[2,]),'statement':([0,2,],[3,27,]),'var_declaration':([0,2,],[4,4,]),'data_structure':([0,2,],[5,5,]),'type':([0,2,],[7,7,]),'bool_type':([0,2,],[8,8,]),'num_type':([0,2,],[9,9,]),'list_structure':([0,2,],[10,10,]),'map_structure':([0,2,],[11,11,]),'elements':([25,],[33,]),'expression':([25,26,28,29,50,54,68,69,],[34,47,48,49,72,76,47,88,]),'bool_expression':([25,26,28,29,40,41,50,51,54,55,56,64,68,69,],[35,35,35,35,63,65,35,73,35,77,78,65,35,35,]),'num_expression':([25,26,28,29,41,50,52,54,57,58,59,60,61,62,68,69,75,],[36,36,36,36,66,36,74,36,79,80,81,82,83,84,36,36,66,]),'key_value_pairs':([26,],[45,]),'key_value':([26,68,],[46,87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','AnalizadorSintactico.py',8),
  ('statements -> statements statement','statements',2,'p_statements','AnalizadorSintactico.py',13),
  ('statements -> statement','statements',1,'p_statements','AnalizadorSintactico.py',14),
  ('statement -> var_declaration','statement',1,'p_statement','AnalizadorSintactico.py',23),
  ('statement -> data_structure','statement',1,'p_statement','AnalizadorSintactico.py',24),
  ('var_declaration -> VARIABLE ASSIGN expression SEMICOLON','var_declaration',4,'p_var_declaration','AnalizadorSintactico.py',30),
  ('var_declaration -> VARIABLE NULL_ASSIGN expression SEMICOLON','var_declaration',4,'p_var_declaration','AnalizadorSintactico.py',31),
  ('var_declaration -> type VARIABLE ASSIGN expression SEMICOLON','var_declaration',5,'p_var_declaration_with_type','AnalizadorSintactico.py',36),
  ('var_declaration -> bool_type VARIABLE ASSIGN bool_expression SEMICOLON','var_declaration',5,'p_var_declaration_with_bool_type','AnalizadorSintactico.py',41),
  ('var_declaration -> num_type VARIABLE ASSIGN num_expression SEMICOLON','var_declaration',5,'p_var_declaration_with_num_type','AnalizadorSintactico.py',46),
  ('type -> VOID','type',1,'p_type','AnalizadorSintactico.py',51),
  ('type -> STRING','type',1,'p_type','AnalizadorSintactico.py',52),
  ('type -> LIST','type',1,'p_type','AnalizadorSintactico.py',53),
  ('type -> SET','type',1,'p_type','AnalizadorSintactico.py',54),
  ('type -> MAP','type',1,'p_type','AnalizadorSintactico.py',55),
  ('type -> STACK','type',1,'p_type','AnalizadorSintactico.py',56),
  ('type -> QUEUE','type',1,'p_type','AnalizadorSintactico.py',57),
  ('type -> TREE','type',1,'p_type','AnalizadorSintactico.py',58),
  ('type -> GRAPH','type',1,'p_type','AnalizadorSintactico.py',59),
  ('bool_type -> BOOL','bool_type',1,'p_bool_type','AnalizadorSintactico.py',64),
  ('num_type -> FLOAT','num_type',1,'p_num_type','AnalizadorSintactico.py',69),
  ('num_type -> INTEGER','num_type',1,'p_num_type','AnalizadorSintactico.py',70),
  ('num_type -> DOUBLE','num_type',1,'p_num_type','AnalizadorSintactico.py',71),
  ('expression -> bool_expression','expression',1,'p_b_expression','AnalizadorSintactico.py',77),
  ('expression -> num_expression','expression',1,'p_n_expression','AnalizadorSintactico.py',83),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','AnalizadorSintactico.py',88),
  ('bool_expression -> TRUE','bool_expression',1,'p_expression_boolean','AnalizadorSintactico.py',93),
  ('bool_expression -> FALSE','bool_expression',1,'p_expression_boolean','AnalizadorSintactico.py',94),
  ('num_expression -> NUMBER','num_expression',1,'p_expression_numeric','AnalizadorSintactico.py',99),
  ('num_expression -> INTEGER','num_expression',1,'p_expression_numeric','AnalizadorSintactico.py',100),
  ('num_expression -> FLOAT','num_expression',1,'p_expression_numeric','AnalizadorSintactico.py',101),
  ('bool_expression -> NEGATION bool_expression','bool_expression',2,'p_bool_expression','AnalizadorSintactico.py',106),
  ('bool_expression -> bool_expression AND bool_expression','bool_expression',3,'p_bool_expression','AnalizadorSintactico.py',107),
  ('bool_expression -> bool_expression OR bool_expression','bool_expression',3,'p_bool_expression','AnalizadorSintactico.py',108),
  ('num_expression -> num_expression PLUS num_expression','num_expression',3,'p_num_expression','AnalizadorSintactico.py',113),
  ('num_expression -> num_expression MINUS num_expression','num_expression',3,'p_num_expression','AnalizadorSintactico.py',114),
  ('num_expression -> num_expression TIMES num_expression','num_expression',3,'p_num_expression','AnalizadorSintactico.py',115),
  ('num_expression -> num_expression DIVIDE num_expression','num_expression',3,'p_num_expression','AnalizadorSintactico.py',116),
  ('num_expression -> num_expression INTEGER_DIVIDE num_expression','num_expression',3,'p_num_expression','AnalizadorSintactico.py',117),
  ('num_expression -> num_expression MODULE num_expression','num_expression',3,'p_num_expression','AnalizadorSintactico.py',118),
  ('bool_expression -> LPAREN bool_expression RPAREN','bool_expression',3,'p_bool_expression_group','AnalizadorSintactico.py',123),
  ('num_expression -> LPAREN num_expression RPAREN','num_expression',3,'p_num_expression_group','AnalizadorSintactico.py',128),
  ('data_structure -> list_structure','data_structure',1,'p_data_structure','AnalizadorSintactico.py',134),
  ('data_structure -> map_structure','data_structure',1,'p_data_structure','AnalizadorSintactico.py',135),
  ('list_structure -> LSQUARE elements RSQUARE','list_structure',3,'p_list_structure','AnalizadorSintactico.py',140),
  ('map_structure -> LBRACE key_value_pairs RBRACE','map_structure',3,'p_map_structure','AnalizadorSintactico.py',145),
  ('elements -> elements COMMA expression','elements',3,'p_elements','AnalizadorSintactico.py',150),
  ('elements -> expression','elements',1,'p_elements','AnalizadorSintactico.py',151),
  ('key_value_pairs -> key_value_pairs COMMA key_value','key_value_pairs',3,'p_key_value_pairs','AnalizadorSintactico.py',159),
  ('key_value_pairs -> key_value','key_value_pairs',1,'p_key_value_pairs','AnalizadorSintactico.py',160),
  ('key_value -> expression COLON expression','key_value',3,'p_key_value','AnalizadorSintactico.py',168),
]
