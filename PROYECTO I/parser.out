Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    AS
    ASSIGN
    BLOCK_COMMENT
    BOOL
    CLASS
    COMMA
    COMPOSED_ASSIGN
    CONST
    CONTINUE
    DECREMENT
    DO
    DOC_COMMENT
    DOT
    DOUBLE
    ELSE
    EXTENDS
    FALSE
    FINAL
    FLOAT
    FOR
    GRAPH
    HASH
    IMPLEMENTS
    INCREMENT
    INTEGER
    INTEGER_DIVIDE
    INTERFACE
    IS
    IS_NOT
    LINE_COMMENT
    LIST
    LSQUARE
    MAP
    NEGATION
    NULL
    NULL_ASSIGN
    OR
    PRINT
    PRIVATE
    PROTECTED
    PUBLIC
    QUEUE
    RSQUARE
    SET
    STACK
    STRING
    STRING_LITERAL
    TREE
    TRUE
    VOID
    WHILE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> sentencias
Rule 2     programa -> sentencias programa
Rule 3     sentencias -> expression
Rule 4     sentencias -> statement
Rule 5     expression -> expression PLUS expression
Rule 6     expression -> expression MINUS expression
Rule 7     expression -> expression TIMES expression
Rule 8     expression -> expression DIVIDE expression
Rule 9     expression -> expression MODULE expression
Rule 10    expression -> LPAREN expression RPAREN
Rule 11    expression -> NUMBER
Rule 12    expression -> VARIABLE
Rule 13    statement -> IF condition
Rule 14    condition -> expression GREATER_THAN expression
Rule 15    condition -> expression LESS_THAN expression
Rule 16    condition -> expression GREATER_EQ expression
Rule 17    condition -> expression LESS_EQ expression
Rule 18    condition -> expression EQUALS expression
Rule 19    condition -> expression NOT_EQUALS expression
Rule 20    statement -> SWITCH LPAREN expression RPAREN LBRACE cases default RBRACE
Rule 21    cases -> cases case
Rule 22    cases -> case
Rule 23    case -> CASE NUMBER COLON statements BREAK SEMICOLON
Rule 24    default -> DEFAULT COLON statements
Rule 25    default -> empty
Rule 26    statements -> statement
Rule 27    statements -> statement statements
Rule 28    statement -> VARIABLE EQUALS expression SEMICOLON
Rule 29    empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
AS                   : 
ASSIGN               : 
BLOCK_COMMENT        : 
BOOL                 : 
BREAK                : 23
CASE                 : 23
CLASS                : 
COLON                : 23 24
COMMA                : 
COMPOSED_ASSIGN      : 
CONST                : 
CONTINUE             : 
DECREMENT            : 
DEFAULT              : 24
DIVIDE               : 8
DO                   : 
DOC_COMMENT          : 
DOT                  : 
DOUBLE               : 
ELSE                 : 
EQUALS               : 18 28
EXTENDS              : 
FALSE                : 
FINAL                : 
FLOAT                : 
FOR                  : 
GRAPH                : 
GREATER_EQ           : 16
GREATER_THAN         : 14
HASH                 : 
IF                   : 13
IMPLEMENTS           : 
INCREMENT            : 
INTEGER              : 
INTEGER_DIVIDE       : 
INTERFACE            : 
IS                   : 
IS_NOT               : 
LBRACE               : 20
LESS_EQ              : 17
LESS_THAN            : 15
LINE_COMMENT         : 
LIST                 : 
LPAREN               : 10 20
LSQUARE              : 
MAP                  : 
MINUS                : 6
MODULE               : 9
NEGATION             : 
NOT_EQUALS           : 19
NULL                 : 
NULL_ASSIGN          : 
NUMBER               : 11 23
OR                   : 
PLUS                 : 5
PRINT                : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
QUEUE                : 
RBRACE               : 20
RPAREN               : 10 20
RSQUARE              : 
SEMICOLON            : 23 28
SET                  : 
STACK                : 
STRING               : 
STRING_LITERAL       : 
SWITCH               : 20
TIMES                : 7
TREE                 : 
TRUE                 : 
VARIABLE             : 12 28
VOID                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

case                 : 21 22
cases                : 20 21
condition            : 13
default              : 20
empty                : 25
expression           : 3 5 5 6 6 7 7 8 8 9 9 10 14 14 15 15 16 16 17 17 18 18 19 19 20 28
programa             : 2 0
sentencias           : 1 2
statement            : 4 26 27
statements           : 23 24 27

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . expression
    (4) sentencias -> . statement
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULE expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . VARIABLE
    (13) statement -> . IF condition
    (20) statement -> . SWITCH LPAREN expression RPAREN LBRACE cases default RBRACE
    (28) statement -> . VARIABLE EQUALS expression SEMICOLON

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    VARIABLE        shift and go to state 7
    IF              shift and go to state 8
    SWITCH          shift and go to state 9

    programa                       shift and go to state 1
    sentencias                     shift and go to state 2
    expression                     shift and go to state 3
    statement                      shift and go to state 4

state 1

    (0) S' -> programa .



state 2

    (1) programa -> sentencias .
    (2) programa -> sentencias . programa
    (1) programa -> . sentencias
    (2) programa -> . sentencias programa
    (3) sentencias -> . expression
    (4) sentencias -> . statement
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULE expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . VARIABLE
    (13) statement -> . IF condition
    (20) statement -> . SWITCH LPAREN expression RPAREN LBRACE cases default RBRACE
    (28) statement -> . VARIABLE EQUALS expression SEMICOLON

    $end            reduce using rule 1 (programa -> sentencias .)
    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    VARIABLE        shift and go to state 7
    IF              shift and go to state 8
    SWITCH          shift and go to state 9

    sentencias                     shift and go to state 2
    programa                       shift and go to state 10
    expression                     shift and go to state 3
    statement                      shift and go to state 4

state 3

    (3) sentencias -> expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULE expression

    LPAREN          reduce using rule 3 (sentencias -> expression .)
    NUMBER          reduce using rule 3 (sentencias -> expression .)
    VARIABLE        reduce using rule 3 (sentencias -> expression .)
    IF              reduce using rule 3 (sentencias -> expression .)
    SWITCH          reduce using rule 3 (sentencias -> expression .)
    $end            reduce using rule 3 (sentencias -> expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULE          shift and go to state 15


state 4

    (4) sentencias -> statement .

    LPAREN          reduce using rule 4 (sentencias -> statement .)
    NUMBER          reduce using rule 4 (sentencias -> statement .)
    VARIABLE        reduce using rule 4 (sentencias -> statement .)
    IF              reduce using rule 4 (sentencias -> statement .)
    SWITCH          reduce using rule 4 (sentencias -> statement .)
    $end            reduce using rule 4 (sentencias -> statement .)


state 5

    (10) expression -> LPAREN . expression RPAREN
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULE expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . VARIABLE

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    VARIABLE        shift and go to state 17

    expression                     shift and go to state 16

state 6

    (11) expression -> NUMBER .

    PLUS            reduce using rule 11 (expression -> NUMBER .)
    MINUS           reduce using rule 11 (expression -> NUMBER .)
    TIMES           reduce using rule 11 (expression -> NUMBER .)
    DIVIDE          reduce using rule 11 (expression -> NUMBER .)
    MODULE          reduce using rule 11 (expression -> NUMBER .)
    LPAREN          reduce using rule 11 (expression -> NUMBER .)
    NUMBER          reduce using rule 11 (expression -> NUMBER .)
    VARIABLE        reduce using rule 11 (expression -> NUMBER .)
    IF              reduce using rule 11 (expression -> NUMBER .)
    SWITCH          reduce using rule 11 (expression -> NUMBER .)
    $end            reduce using rule 11 (expression -> NUMBER .)
    RPAREN          reduce using rule 11 (expression -> NUMBER .)
    GREATER_THAN    reduce using rule 11 (expression -> NUMBER .)
    LESS_THAN       reduce using rule 11 (expression -> NUMBER .)
    GREATER_EQ      reduce using rule 11 (expression -> NUMBER .)
    LESS_EQ         reduce using rule 11 (expression -> NUMBER .)
    EQUALS          reduce using rule 11 (expression -> NUMBER .)
    NOT_EQUALS      reduce using rule 11 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 11 (expression -> NUMBER .)
    RBRACE          reduce using rule 11 (expression -> NUMBER .)
    BREAK           reduce using rule 11 (expression -> NUMBER .)


state 7

    (12) expression -> VARIABLE .
    (28) statement -> VARIABLE . EQUALS expression SEMICOLON

    PLUS            reduce using rule 12 (expression -> VARIABLE .)
    MINUS           reduce using rule 12 (expression -> VARIABLE .)
    TIMES           reduce using rule 12 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 12 (expression -> VARIABLE .)
    MODULE          reduce using rule 12 (expression -> VARIABLE .)
    LPAREN          reduce using rule 12 (expression -> VARIABLE .)
    NUMBER          reduce using rule 12 (expression -> VARIABLE .)
    VARIABLE        reduce using rule 12 (expression -> VARIABLE .)
    IF              reduce using rule 12 (expression -> VARIABLE .)
    SWITCH          reduce using rule 12 (expression -> VARIABLE .)
    $end            reduce using rule 12 (expression -> VARIABLE .)
    EQUALS          shift and go to state 18


state 8

    (13) statement -> IF . condition
    (14) condition -> . expression GREATER_THAN expression
    (15) condition -> . expression LESS_THAN expression
    (16) condition -> . expression GREATER_EQ expression
    (17) condition -> . expression LESS_EQ expression
    (18) condition -> . expression EQUALS expression
    (19) condition -> . expression NOT_EQUALS expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULE expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . VARIABLE

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    VARIABLE        shift and go to state 17

    condition                      shift and go to state 19
    expression                     shift and go to state 20

state 9

    (20) statement -> SWITCH . LPAREN expression RPAREN LBRACE cases default RBRACE

    LPAREN          shift and go to state 21


state 10

    (2) programa -> sentencias programa .

    $end            reduce using rule 2 (programa -> sentencias programa .)


state 11

    (5) expression -> expression PLUS . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULE expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . VARIABLE

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    VARIABLE        shift and go to state 17

    expression                     shift and go to state 22

state 12

    (6) expression -> expression MINUS . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULE expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . VARIABLE

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    VARIABLE        shift and go to state 17

    expression                     shift and go to state 23

state 13

    (7) expression -> expression TIMES . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULE expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . VARIABLE

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    VARIABLE        shift and go to state 17

    expression                     shift and go to state 24

state 14

    (8) expression -> expression DIVIDE . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULE expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . VARIABLE

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    VARIABLE        shift and go to state 17

    expression                     shift and go to state 25

state 15

    (9) expression -> expression MODULE . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULE expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . VARIABLE

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    VARIABLE        shift and go to state 17

    expression                     shift and go to state 26

state 16

    (10) expression -> LPAREN expression . RPAREN
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULE expression

    RPAREN          shift and go to state 27
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULE          shift and go to state 15


state 17

    (12) expression -> VARIABLE .

    RPAREN          reduce using rule 12 (expression -> VARIABLE .)
    PLUS            reduce using rule 12 (expression -> VARIABLE .)
    MINUS           reduce using rule 12 (expression -> VARIABLE .)
    TIMES           reduce using rule 12 (expression -> VARIABLE .)
    DIVIDE          reduce using rule 12 (expression -> VARIABLE .)
    MODULE          reduce using rule 12 (expression -> VARIABLE .)
    GREATER_THAN    reduce using rule 12 (expression -> VARIABLE .)
    LESS_THAN       reduce using rule 12 (expression -> VARIABLE .)
    GREATER_EQ      reduce using rule 12 (expression -> VARIABLE .)
    LESS_EQ         reduce using rule 12 (expression -> VARIABLE .)
    EQUALS          reduce using rule 12 (expression -> VARIABLE .)
    NOT_EQUALS      reduce using rule 12 (expression -> VARIABLE .)
    LPAREN          reduce using rule 12 (expression -> VARIABLE .)
    NUMBER          reduce using rule 12 (expression -> VARIABLE .)
    VARIABLE        reduce using rule 12 (expression -> VARIABLE .)
    IF              reduce using rule 12 (expression -> VARIABLE .)
    SWITCH          reduce using rule 12 (expression -> VARIABLE .)
    $end            reduce using rule 12 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 12 (expression -> VARIABLE .)
    RBRACE          reduce using rule 12 (expression -> VARIABLE .)
    BREAK           reduce using rule 12 (expression -> VARIABLE .)


state 18

    (28) statement -> VARIABLE EQUALS . expression SEMICOLON
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULE expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . VARIABLE

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    VARIABLE        shift and go to state 17

    expression                     shift and go to state 28

state 19

    (13) statement -> IF condition .

    LPAREN          reduce using rule 13 (statement -> IF condition .)
    NUMBER          reduce using rule 13 (statement -> IF condition .)
    VARIABLE        reduce using rule 13 (statement -> IF condition .)
    IF              reduce using rule 13 (statement -> IF condition .)
    SWITCH          reduce using rule 13 (statement -> IF condition .)
    $end            reduce using rule 13 (statement -> IF condition .)
    RBRACE          reduce using rule 13 (statement -> IF condition .)
    BREAK           reduce using rule 13 (statement -> IF condition .)


state 20

    (14) condition -> expression . GREATER_THAN expression
    (15) condition -> expression . LESS_THAN expression
    (16) condition -> expression . GREATER_EQ expression
    (17) condition -> expression . LESS_EQ expression
    (18) condition -> expression . EQUALS expression
    (19) condition -> expression . NOT_EQUALS expression
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULE expression

    GREATER_THAN    shift and go to state 29
    LESS_THAN       shift and go to state 30
    GREATER_EQ      shift and go to state 31
    LESS_EQ         shift and go to state 32
    EQUALS          shift and go to state 33
    NOT_EQUALS      shift and go to state 34
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULE          shift and go to state 15


state 21

    (20) statement -> SWITCH LPAREN . expression RPAREN LBRACE cases default RBRACE
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULE expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . VARIABLE

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    VARIABLE        shift and go to state 17

    expression                     shift and go to state 35

state 22

    (5) expression -> expression PLUS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
    LPAREN          reduce using rule 5 (expression -> expression PLUS expression .)
    NUMBER          reduce using rule 5 (expression -> expression PLUS expression .)
    VARIABLE        reduce using rule 5 (expression -> expression PLUS expression .)
    IF              reduce using rule 5 (expression -> expression PLUS expression .)
    SWITCH          reduce using rule 5 (expression -> expression PLUS expression .)
    $end            reduce using rule 5 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 5 (expression -> expression PLUS expression .)
    GREATER_THAN    reduce using rule 5 (expression -> expression PLUS expression .)
    LESS_THAN       reduce using rule 5 (expression -> expression PLUS expression .)
    GREATER_EQ      reduce using rule 5 (expression -> expression PLUS expression .)
    LESS_EQ         reduce using rule 5 (expression -> expression PLUS expression .)
    EQUALS          reduce using rule 5 (expression -> expression PLUS expression .)
    NOT_EQUALS      reduce using rule 5 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 5 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 5 (expression -> expression PLUS expression .)
    BREAK           reduce using rule 5 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULE          shift and go to state 15

  ! PLUS            [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 5 (expression -> expression PLUS expression .) ]
  ! MODULE          [ reduce using rule 5 (expression -> expression PLUS expression .) ]


state 23

    (6) expression -> expression MINUS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
    LPAREN          reduce using rule 6 (expression -> expression MINUS expression .)
    NUMBER          reduce using rule 6 (expression -> expression MINUS expression .)
    VARIABLE        reduce using rule 6 (expression -> expression MINUS expression .)
    IF              reduce using rule 6 (expression -> expression MINUS expression .)
    SWITCH          reduce using rule 6 (expression -> expression MINUS expression .)
    $end            reduce using rule 6 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 6 (expression -> expression MINUS expression .)
    GREATER_THAN    reduce using rule 6 (expression -> expression MINUS expression .)
    LESS_THAN       reduce using rule 6 (expression -> expression MINUS expression .)
    GREATER_EQ      reduce using rule 6 (expression -> expression MINUS expression .)
    LESS_EQ         reduce using rule 6 (expression -> expression MINUS expression .)
    EQUALS          reduce using rule 6 (expression -> expression MINUS expression .)
    NOT_EQUALS      reduce using rule 6 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 6 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 6 (expression -> expression MINUS expression .)
    BREAK           reduce using rule 6 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULE          shift and go to state 15

  ! PLUS            [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! MODULE          [ reduce using rule 6 (expression -> expression MINUS expression .) ]


state 24

    (7) expression -> expression TIMES expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
    LPAREN          reduce using rule 7 (expression -> expression TIMES expression .)
    NUMBER          reduce using rule 7 (expression -> expression TIMES expression .)
    VARIABLE        reduce using rule 7 (expression -> expression TIMES expression .)
    IF              reduce using rule 7 (expression -> expression TIMES expression .)
    SWITCH          reduce using rule 7 (expression -> expression TIMES expression .)
    $end            reduce using rule 7 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 7 (expression -> expression TIMES expression .)
    GREATER_THAN    reduce using rule 7 (expression -> expression TIMES expression .)
    LESS_THAN       reduce using rule 7 (expression -> expression TIMES expression .)
    GREATER_EQ      reduce using rule 7 (expression -> expression TIMES expression .)
    LESS_EQ         reduce using rule 7 (expression -> expression TIMES expression .)
    EQUALS          reduce using rule 7 (expression -> expression TIMES expression .)
    NOT_EQUALS      reduce using rule 7 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 7 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 7 (expression -> expression TIMES expression .)
    BREAK           reduce using rule 7 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULE          shift and go to state 15

  ! PLUS            [ reduce using rule 7 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 7 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 7 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 7 (expression -> expression TIMES expression .) ]
  ! MODULE          [ reduce using rule 7 (expression -> expression TIMES expression .) ]


state 25

    (8) expression -> expression DIVIDE expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
    LPAREN          reduce using rule 8 (expression -> expression DIVIDE expression .)
    NUMBER          reduce using rule 8 (expression -> expression DIVIDE expression .)
    VARIABLE        reduce using rule 8 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 8 (expression -> expression DIVIDE expression .)
    SWITCH          reduce using rule 8 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 8 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 8 (expression -> expression DIVIDE expression .)
    GREATER_THAN    reduce using rule 8 (expression -> expression DIVIDE expression .)
    LESS_THAN       reduce using rule 8 (expression -> expression DIVIDE expression .)
    GREATER_EQ      reduce using rule 8 (expression -> expression DIVIDE expression .)
    LESS_EQ         reduce using rule 8 (expression -> expression DIVIDE expression .)
    EQUALS          reduce using rule 8 (expression -> expression DIVIDE expression .)
    NOT_EQUALS      reduce using rule 8 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 8 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 8 (expression -> expression DIVIDE expression .)
    BREAK           reduce using rule 8 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULE          shift and go to state 15

  ! PLUS            [ reduce using rule 8 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 8 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 8 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 8 (expression -> expression DIVIDE expression .) ]
  ! MODULE          [ reduce using rule 8 (expression -> expression DIVIDE expression .) ]


state 26

    (9) expression -> expression MODULE expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
    LPAREN          reduce using rule 9 (expression -> expression MODULE expression .)
    NUMBER          reduce using rule 9 (expression -> expression MODULE expression .)
    VARIABLE        reduce using rule 9 (expression -> expression MODULE expression .)
    IF              reduce using rule 9 (expression -> expression MODULE expression .)
    SWITCH          reduce using rule 9 (expression -> expression MODULE expression .)
    $end            reduce using rule 9 (expression -> expression MODULE expression .)
    RPAREN          reduce using rule 9 (expression -> expression MODULE expression .)
    GREATER_THAN    reduce using rule 9 (expression -> expression MODULE expression .)
    LESS_THAN       reduce using rule 9 (expression -> expression MODULE expression .)
    GREATER_EQ      reduce using rule 9 (expression -> expression MODULE expression .)
    LESS_EQ         reduce using rule 9 (expression -> expression MODULE expression .)
    EQUALS          reduce using rule 9 (expression -> expression MODULE expression .)
    NOT_EQUALS      reduce using rule 9 (expression -> expression MODULE expression .)
    SEMICOLON       reduce using rule 9 (expression -> expression MODULE expression .)
    RBRACE          reduce using rule 9 (expression -> expression MODULE expression .)
    BREAK           reduce using rule 9 (expression -> expression MODULE expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULE          shift and go to state 15

  ! PLUS            [ reduce using rule 9 (expression -> expression MODULE expression .) ]
  ! MINUS           [ reduce using rule 9 (expression -> expression MODULE expression .) ]
  ! TIMES           [ reduce using rule 9 (expression -> expression MODULE expression .) ]
  ! DIVIDE          [ reduce using rule 9 (expression -> expression MODULE expression .) ]
  ! MODULE          [ reduce using rule 9 (expression -> expression MODULE expression .) ]


state 27

    (10) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    MODULE          reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    GREATER_EQ      reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    LESS_EQ         reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    NOT_EQUALS      reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 10 (expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 10 (expression -> LPAREN expression RPAREN .)


state 28

    (28) statement -> VARIABLE EQUALS expression . SEMICOLON
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULE expression

    SEMICOLON       shift and go to state 36
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULE          shift and go to state 15


state 29

    (14) condition -> expression GREATER_THAN . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULE expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . VARIABLE

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    VARIABLE        shift and go to state 17

    expression                     shift and go to state 37

state 30

    (15) condition -> expression LESS_THAN . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULE expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . VARIABLE

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    VARIABLE        shift and go to state 17

    expression                     shift and go to state 38

state 31

    (16) condition -> expression GREATER_EQ . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULE expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . VARIABLE

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    VARIABLE        shift and go to state 17

    expression                     shift and go to state 39

state 32

    (17) condition -> expression LESS_EQ . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULE expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . VARIABLE

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    VARIABLE        shift and go to state 17

    expression                     shift and go to state 40

state 33

    (18) condition -> expression EQUALS . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULE expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . VARIABLE

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    VARIABLE        shift and go to state 17

    expression                     shift and go to state 41

state 34

    (19) condition -> expression NOT_EQUALS . expression
    (5) expression -> . expression PLUS expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression TIMES expression
    (8) expression -> . expression DIVIDE expression
    (9) expression -> . expression MODULE expression
    (10) expression -> . LPAREN expression RPAREN
    (11) expression -> . NUMBER
    (12) expression -> . VARIABLE

    LPAREN          shift and go to state 5
    NUMBER          shift and go to state 6
    VARIABLE        shift and go to state 17

    expression                     shift and go to state 42

state 35

    (20) statement -> SWITCH LPAREN expression . RPAREN LBRACE cases default RBRACE
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULE expression

    RPAREN          shift and go to state 43
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULE          shift and go to state 15


state 36

    (28) statement -> VARIABLE EQUALS expression SEMICOLON .

    LPAREN          reduce using rule 28 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    NUMBER          reduce using rule 28 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    VARIABLE        reduce using rule 28 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    IF              reduce using rule 28 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    SWITCH          reduce using rule 28 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    $end            reduce using rule 28 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    RBRACE          reduce using rule 28 (statement -> VARIABLE EQUALS expression SEMICOLON .)
    BREAK           reduce using rule 28 (statement -> VARIABLE EQUALS expression SEMICOLON .)


state 37

    (14) condition -> expression GREATER_THAN expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULE expression

    LPAREN          reduce using rule 14 (condition -> expression GREATER_THAN expression .)
    NUMBER          reduce using rule 14 (condition -> expression GREATER_THAN expression .)
    VARIABLE        reduce using rule 14 (condition -> expression GREATER_THAN expression .)
    IF              reduce using rule 14 (condition -> expression GREATER_THAN expression .)
    SWITCH          reduce using rule 14 (condition -> expression GREATER_THAN expression .)
    $end            reduce using rule 14 (condition -> expression GREATER_THAN expression .)
    RBRACE          reduce using rule 14 (condition -> expression GREATER_THAN expression .)
    BREAK           reduce using rule 14 (condition -> expression GREATER_THAN expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULE          shift and go to state 15


state 38

    (15) condition -> expression LESS_THAN expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULE expression

    LPAREN          reduce using rule 15 (condition -> expression LESS_THAN expression .)
    NUMBER          reduce using rule 15 (condition -> expression LESS_THAN expression .)
    VARIABLE        reduce using rule 15 (condition -> expression LESS_THAN expression .)
    IF              reduce using rule 15 (condition -> expression LESS_THAN expression .)
    SWITCH          reduce using rule 15 (condition -> expression LESS_THAN expression .)
    $end            reduce using rule 15 (condition -> expression LESS_THAN expression .)
    RBRACE          reduce using rule 15 (condition -> expression LESS_THAN expression .)
    BREAK           reduce using rule 15 (condition -> expression LESS_THAN expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULE          shift and go to state 15


state 39

    (16) condition -> expression GREATER_EQ expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULE expression

    LPAREN          reduce using rule 16 (condition -> expression GREATER_EQ expression .)
    NUMBER          reduce using rule 16 (condition -> expression GREATER_EQ expression .)
    VARIABLE        reduce using rule 16 (condition -> expression GREATER_EQ expression .)
    IF              reduce using rule 16 (condition -> expression GREATER_EQ expression .)
    SWITCH          reduce using rule 16 (condition -> expression GREATER_EQ expression .)
    $end            reduce using rule 16 (condition -> expression GREATER_EQ expression .)
    RBRACE          reduce using rule 16 (condition -> expression GREATER_EQ expression .)
    BREAK           reduce using rule 16 (condition -> expression GREATER_EQ expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULE          shift and go to state 15


state 40

    (17) condition -> expression LESS_EQ expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULE expression

    LPAREN          reduce using rule 17 (condition -> expression LESS_EQ expression .)
    NUMBER          reduce using rule 17 (condition -> expression LESS_EQ expression .)
    VARIABLE        reduce using rule 17 (condition -> expression LESS_EQ expression .)
    IF              reduce using rule 17 (condition -> expression LESS_EQ expression .)
    SWITCH          reduce using rule 17 (condition -> expression LESS_EQ expression .)
    $end            reduce using rule 17 (condition -> expression LESS_EQ expression .)
    RBRACE          reduce using rule 17 (condition -> expression LESS_EQ expression .)
    BREAK           reduce using rule 17 (condition -> expression LESS_EQ expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULE          shift and go to state 15


state 41

    (18) condition -> expression EQUALS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULE expression

    LPAREN          reduce using rule 18 (condition -> expression EQUALS expression .)
    NUMBER          reduce using rule 18 (condition -> expression EQUALS expression .)
    VARIABLE        reduce using rule 18 (condition -> expression EQUALS expression .)
    IF              reduce using rule 18 (condition -> expression EQUALS expression .)
    SWITCH          reduce using rule 18 (condition -> expression EQUALS expression .)
    $end            reduce using rule 18 (condition -> expression EQUALS expression .)
    RBRACE          reduce using rule 18 (condition -> expression EQUALS expression .)
    BREAK           reduce using rule 18 (condition -> expression EQUALS expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULE          shift and go to state 15


state 42

    (19) condition -> expression NOT_EQUALS expression .
    (5) expression -> expression . PLUS expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . TIMES expression
    (8) expression -> expression . DIVIDE expression
    (9) expression -> expression . MODULE expression

    LPAREN          reduce using rule 19 (condition -> expression NOT_EQUALS expression .)
    NUMBER          reduce using rule 19 (condition -> expression NOT_EQUALS expression .)
    VARIABLE        reduce using rule 19 (condition -> expression NOT_EQUALS expression .)
    IF              reduce using rule 19 (condition -> expression NOT_EQUALS expression .)
    SWITCH          reduce using rule 19 (condition -> expression NOT_EQUALS expression .)
    $end            reduce using rule 19 (condition -> expression NOT_EQUALS expression .)
    RBRACE          reduce using rule 19 (condition -> expression NOT_EQUALS expression .)
    BREAK           reduce using rule 19 (condition -> expression NOT_EQUALS expression .)
    PLUS            shift and go to state 11
    MINUS           shift and go to state 12
    TIMES           shift and go to state 13
    DIVIDE          shift and go to state 14
    MODULE          shift and go to state 15


state 43

    (20) statement -> SWITCH LPAREN expression RPAREN . LBRACE cases default RBRACE

    LBRACE          shift and go to state 44


state 44

    (20) statement -> SWITCH LPAREN expression RPAREN LBRACE . cases default RBRACE
    (21) cases -> . cases case
    (22) cases -> . case
    (23) case -> . CASE NUMBER COLON statements BREAK SEMICOLON

    CASE            shift and go to state 47

    cases                          shift and go to state 45
    case                           shift and go to state 46

state 45

    (20) statement -> SWITCH LPAREN expression RPAREN LBRACE cases . default RBRACE
    (21) cases -> cases . case
    (24) default -> . DEFAULT COLON statements
    (25) default -> . empty
    (23) case -> . CASE NUMBER COLON statements BREAK SEMICOLON
    (29) empty -> .

    DEFAULT         shift and go to state 50
    CASE            shift and go to state 47
    RBRACE          reduce using rule 29 (empty -> .)

    default                        shift and go to state 48
    case                           shift and go to state 49
    empty                          shift and go to state 51

state 46

    (22) cases -> case .

    DEFAULT         reduce using rule 22 (cases -> case .)
    CASE            reduce using rule 22 (cases -> case .)
    RBRACE          reduce using rule 22 (cases -> case .)


state 47

    (23) case -> CASE . NUMBER COLON statements BREAK SEMICOLON

    NUMBER          shift and go to state 52


state 48

    (20) statement -> SWITCH LPAREN expression RPAREN LBRACE cases default . RBRACE

    RBRACE          shift and go to state 53


state 49

    (21) cases -> cases case .

    DEFAULT         reduce using rule 21 (cases -> cases case .)
    CASE            reduce using rule 21 (cases -> cases case .)
    RBRACE          reduce using rule 21 (cases -> cases case .)


state 50

    (24) default -> DEFAULT . COLON statements

    COLON           shift and go to state 54


state 51

    (25) default -> empty .

    RBRACE          reduce using rule 25 (default -> empty .)


state 52

    (23) case -> CASE NUMBER . COLON statements BREAK SEMICOLON

    COLON           shift and go to state 55


state 53

    (20) statement -> SWITCH LPAREN expression RPAREN LBRACE cases default RBRACE .

    LPAREN          reduce using rule 20 (statement -> SWITCH LPAREN expression RPAREN LBRACE cases default RBRACE .)
    NUMBER          reduce using rule 20 (statement -> SWITCH LPAREN expression RPAREN LBRACE cases default RBRACE .)
    VARIABLE        reduce using rule 20 (statement -> SWITCH LPAREN expression RPAREN LBRACE cases default RBRACE .)
    IF              reduce using rule 20 (statement -> SWITCH LPAREN expression RPAREN LBRACE cases default RBRACE .)
    SWITCH          reduce using rule 20 (statement -> SWITCH LPAREN expression RPAREN LBRACE cases default RBRACE .)
    $end            reduce using rule 20 (statement -> SWITCH LPAREN expression RPAREN LBRACE cases default RBRACE .)
    RBRACE          reduce using rule 20 (statement -> SWITCH LPAREN expression RPAREN LBRACE cases default RBRACE .)
    BREAK           reduce using rule 20 (statement -> SWITCH LPAREN expression RPAREN LBRACE cases default RBRACE .)


state 54

    (24) default -> DEFAULT COLON . statements
    (26) statements -> . statement
    (27) statements -> . statement statements
    (13) statement -> . IF condition
    (20) statement -> . SWITCH LPAREN expression RPAREN LBRACE cases default RBRACE
    (28) statement -> . VARIABLE EQUALS expression SEMICOLON

    IF              shift and go to state 8
    SWITCH          shift and go to state 9
    VARIABLE        shift and go to state 58

    statements                     shift and go to state 56
    statement                      shift and go to state 57

state 55

    (23) case -> CASE NUMBER COLON . statements BREAK SEMICOLON
    (26) statements -> . statement
    (27) statements -> . statement statements
    (13) statement -> . IF condition
    (20) statement -> . SWITCH LPAREN expression RPAREN LBRACE cases default RBRACE
    (28) statement -> . VARIABLE EQUALS expression SEMICOLON

    IF              shift and go to state 8
    SWITCH          shift and go to state 9
    VARIABLE        shift and go to state 58

    statements                     shift and go to state 59
    statement                      shift and go to state 57

state 56

    (24) default -> DEFAULT COLON statements .

    RBRACE          reduce using rule 24 (default -> DEFAULT COLON statements .)


state 57

    (26) statements -> statement .
    (27) statements -> statement . statements
    (26) statements -> . statement
    (27) statements -> . statement statements
    (13) statement -> . IF condition
    (20) statement -> . SWITCH LPAREN expression RPAREN LBRACE cases default RBRACE
    (28) statement -> . VARIABLE EQUALS expression SEMICOLON

    RBRACE          reduce using rule 26 (statements -> statement .)
    BREAK           reduce using rule 26 (statements -> statement .)
    IF              shift and go to state 8
    SWITCH          shift and go to state 9
    VARIABLE        shift and go to state 58

    statement                      shift and go to state 57
    statements                     shift and go to state 60

state 58

    (28) statement -> VARIABLE . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 18


state 59

    (23) case -> CASE NUMBER COLON statements . BREAK SEMICOLON

    BREAK           shift and go to state 61


state 60

    (27) statements -> statement statements .

    RBRACE          reduce using rule 27 (statements -> statement statements .)
    BREAK           reduce using rule 27 (statements -> statement statements .)


state 61

    (23) case -> CASE NUMBER COLON statements BREAK . SEMICOLON

    SEMICOLON       shift and go to state 62


state 62

    (23) case -> CASE NUMBER COLON statements BREAK SEMICOLON .

    DEFAULT         reduce using rule 23 (case -> CASE NUMBER COLON statements BREAK SEMICOLON .)
    CASE            reduce using rule 23 (case -> CASE NUMBER COLON statements BREAK SEMICOLON .)
    RBRACE          reduce using rule 23 (case -> CASE NUMBER COLON statements BREAK SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 22 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 22 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 22 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 22 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 22 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 23 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 23 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 23 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 23 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 23 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 24 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 24 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 24 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 24 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 24 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 25 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 25 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 25 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 25 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 25 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 26 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 26 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 26 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 26 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 26 resolved as shift
