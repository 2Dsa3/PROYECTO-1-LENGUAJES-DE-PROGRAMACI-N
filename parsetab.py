
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDrightNEGATIONleftPLUSMINUSleftTIMESDIVIDEMODULEABSTRACT AND AS ASSIGN BLOCK_COMMENT BOOL BREAK CASE CLASS COLON COMMA COMPOSED_ASSIGN CONST CONTINUE DECREMENT DEFAULT DIVIDE DO DOC_COMMENT DOT DOUBLE DYNAMIC ELSE EQUALS EXTENDS FALSE FINAL FLOAT FOR GRAPH GREATER_EQ GREATER_THAN HASH IF IMPLEMENTS INCREMENT INTEGER INTEGER_DIVIDE INTERFACE IS IS_NOT LBRACE LESS_EQ LESS_THAN LINE_COMMENT LIST LPAREN LSQUARE MAIN MAP MINUS MODULE NEGATION NOT_EQUALS NULL NULL_ASSIGN NUMBER OBJECT OR PLUS PRINT PRIVATE PROTECTED PUBLIC QUEUE RBRACE RETURN RPAREN RSQUARE SEMICOLON SET STACK STRING STRING_LITERAL SWITCH TIMES TREE TRUE VARIABLE VAR_TYPE VOID WHILEprogram : main_funcmain_func : VOID MAIN LPAREN RPAREN LBRACE statementsstatements : statements statement\n                  | statementstatement : var_declaration SEMICOLON\n                | func_declaration SEMICOLON\n                | control_structurebasic_statement : var_declaration SEMICOLONvar_declaration : var_declaration_num \n                       | var_declaration_string \n                       | var_declaration_boolvar_declaration_num : type_num VARIABLE ASSIGN num_expression \n                        | type_num VARIABLE ASSIGN data_structure\n                       | type_num VARIABLEvar_declaration_string : type_str VARIABLE ASSIGN str_expression\n                        | type_str VARIABLE ASSIGN data_structure\n                        | type_str VARIABLEvar_declaration_bool :   type_bool VARIABLE ASSIGN bool_expression\n                            | type_bool VARIABLE ASSIGN data_structure\n                            | type_bool VARIABLEtype_num : DOUBLE\n            | INTEGERtype_str : STRINGtype_bool : BOOLtype : STRING\n            | LIST\n            | SET\n            | MAP\n            | STACK\n            | QUEUE\n            | TREE\n            | GRAPH\n            | DOUBLE\n            | INTEGER\n            | BOOL\n            | VAR_TYPEvalue : STRING_LITERAL\n             | NUMBER\n             | FLOAT\n             | TRUE\n             | FALSEnum_expression : num_expression PLUS num_expression\n                      | num_expression MINUS num_expression\n                      | num_expression TIMES num_expression\n                      | num_expression DIVIDE num_expression\n                      | num_expression MODULE num_expression\n                      | LPAREN num_expression RPARENstr_expression : STRING_LITERALnum_expression : NUMBER\n                      | FLOATbool_expression : bool_expression AND bool_expression\n                       | bool_expression OR bool_expressionbool_expression : NEGATION bool_expressionbool_expression : TRUE\n                       | FALSEdata_structure : list_structure\n                      | map_structure\n                      | set_structurelist_structure : LSQUARE elements RSQUAREmap_structure : LBRACE key_value_pairs RBRACEset_structure : LBRACE elements RBRACEelements : elements COMMA value\n                | valuekey_value_pairs : key_value_pairs COMMA key_value\n                       | key_valuekey_value : value COLON valuecontrol_structure : if_structure\n                        | switch_structureif_structure : IF LPAREN condition RPAREN LBRACE basic_statement RBRACEswitch_structure : SWITCH LPAREN condition RPAREN LBRACE cases default RBRACEcondition : num_expression GREATER_THAN num_expression\n                 | num_expression LESS_THAN num_expression\n                 | num_expression GREATER_EQ num_expression\n                 | num_expression LESS_EQ num_expression\n                 | num_expression EQUALS num_expression\n                 | num_expression NOT_EQUALS num_expressioncases : cases case\n             | casecase : CASE NUMBER COLON basic_statement BREAK SEMICOLONdefault : DEFAULT COLON basic_statement SEMICOLON\n               | emptyempty :func_declaration : func_declaration_num SEMICOLON\n                        | func_declaration_str SEMICOLON\n                        | func_declaration_bool SEMICOLON\n                        | func_declaration_void SEMICOLONfunc_declaration_num : type_num VARIABLE LPAREN params RPAREN LBRACE function_statment_num RBRACEfunc_declaration_str : type_str VARIABLE LPAREN params RPAREN LBRACE function_statment_str RBRACEfunc_declaration_bool : type_bool VARIABLE LPAREN params RPAREN LBRACE function_statment_bool RBRACEfunc_declaration_void : VOID VARIABLE LPAREN params RPAREN LBRACE basic_statement RBRACEparams : params COMMA type VARIABLE\n              | type VARIABLE\n            function_statment_num : return_statment_num\n                            | basic_statementfunction_statment_str : return_statment_string \n                            | basic_statementfunction_statment_bool : return_statment_bool \n                            | basic_statementreturn_statment_num : RETURN num_expression SEMICOLONreturn_statment_string : RETURN str_expression SEMICOLONreturn_statment_bool : RETURN bool_expression SEMICOLON'
    
_lr_action_items = {'VOID':([0,7,9,10,13,21,22,33,34,35,177,194,],[3,8,8,-4,-7,-67,-68,-3,-5,-6,-69,-70,]),'$end':([1,2,9,10,13,21,22,33,34,35,177,194,],[0,-1,-2,-4,-7,-67,-68,-3,-5,-6,-69,-70,]),'MAIN':([3,],[4,]),'LPAREN':([4,26,27,32,40,41,42,43,44,46,52,92,93,94,95,96,97,98,99,100,101,102,168,],[5,43,44,45,47,49,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'RPAREN':([5,53,55,56,57,58,79,83,89,90,106,124,126,127,128,129,130,131,132,133,134,135,136,160,],[6,91,-49,-50,103,104,118,119,123,124,-92,-47,-71,-72,-73,-74,-75,-76,-42,-43,-44,-45,-46,-91,]),'LBRACE':([6,46,48,50,91,103,104,118,119,123,],[7,78,78,78,125,137,138,146,147,150,]),'IF':([7,9,10,13,21,22,33,34,35,177,194,],[26,26,-4,-7,-67,-68,-3,-5,-6,-69,-70,]),'SWITCH':([7,9,10,13,21,22,33,34,35,177,194,],[27,27,-4,-7,-67,-68,-3,-5,-6,-69,-70,]),'DOUBLE':([7,9,10,13,21,22,33,34,35,45,47,49,51,105,125,138,146,147,150,177,194,195,196,],[28,28,-4,-7,-67,-68,-3,-5,-6,68,68,68,68,68,28,28,28,28,28,-69,-70,28,28,]),'INTEGER':([7,9,10,13,21,22,33,34,35,45,47,49,51,105,125,138,146,147,150,177,194,195,196,],[29,29,-4,-7,-67,-68,-3,-5,-6,69,69,69,69,69,29,29,29,29,29,-69,-70,29,29,]),'STRING':([7,9,10,13,21,22,33,34,35,45,47,49,51,105,125,138,146,147,150,177,194,195,196,],[30,30,-4,-7,-67,-68,-3,-5,-6,60,60,60,60,60,30,30,30,30,30,-69,-70,30,30,]),'BOOL':([7,9,10,13,21,22,33,34,35,45,47,49,51,105,125,138,146,147,150,177,194,195,196,],[31,31,-4,-7,-67,-68,-3,-5,-6,70,70,70,70,70,31,31,31,31,31,-69,-70,31,31,]),'VARIABLE':([8,23,24,25,28,29,30,31,59,60,61,62,63,64,65,66,67,68,69,70,71,139,153,154,155,],[32,40,41,42,-21,-22,-23,-24,106,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,160,179,180,181,]),'SEMICOLON':([11,12,14,15,16,17,18,19,20,36,37,38,39,40,41,42,55,56,72,73,74,75,76,80,81,82,84,85,87,88,122,124,132,133,134,135,136,140,142,144,148,149,152,178,179,180,181,187,188,189,190,191,192,193,200,203,],[34,35,-9,-10,-11,36,37,38,39,-83,-84,-85,-86,-14,-17,-20,-49,-50,-12,-13,-56,-57,-58,-15,-16,-48,-18,-19,-54,-55,-53,-47,-42,-43,-44,-45,-46,-59,-60,-61,-51,-52,178,-8,-14,-17,-20,-90,-87,197,-88,198,-89,199,202,204,]),'ASSIGN':([40,41,42,179,180,181,],[46,48,50,46,48,50,]),'NUMBER':([43,44,46,52,77,78,92,93,94,95,96,97,98,99,100,101,102,141,143,145,158,168,],[55,55,55,55,110,110,55,55,55,55,55,55,55,55,55,55,55,110,110,110,186,55,]),'FLOAT':([43,44,46,52,77,78,92,93,94,95,96,97,98,99,100,101,102,141,143,145,168,],[56,56,56,56,111,111,56,56,56,56,56,56,56,56,56,56,56,111,111,111,56,]),'LIST':([45,47,49,51,105,],[61,61,61,61,61,]),'SET':([45,47,49,51,105,],[62,62,62,62,62,]),'MAP':([45,47,49,51,105,],[63,63,63,63,63,]),'STACK':([45,47,49,51,105,],[64,64,64,64,64,]),'QUEUE':([45,47,49,51,105,],[65,65,65,65,65,]),'TREE':([45,47,49,51,105,],[66,66,66,66,66,]),'GRAPH':([45,47,49,51,105,],[67,67,67,67,67,]),'VAR_TYPE':([45,47,49,51,105,],[71,71,71,71,71,]),'LSQUARE':([46,48,50,],[77,77,77,]),'STRING_LITERAL':([48,77,78,141,143,145,172,],[82,109,109,109,109,109,82,]),'NEGATION':([50,86,120,121,176,],[86,86,86,86,86,]),'TRUE':([50,77,78,86,120,121,141,143,145,176,],[87,112,112,87,87,87,112,112,112,87,]),'FALSE':([50,77,78,86,120,121,141,143,145,176,],[88,113,113,88,88,88,113,113,113,88,]),'GREATER_THAN':([54,55,56,124,132,133,134,135,136,],[92,-49,-50,-47,-42,-43,-44,-45,-46,]),'LESS_THAN':([54,55,56,124,132,133,134,135,136,],[93,-49,-50,-47,-42,-43,-44,-45,-46,]),'GREATER_EQ':([54,55,56,124,132,133,134,135,136,],[94,-49,-50,-47,-42,-43,-44,-45,-46,]),'LESS_EQ':([54,55,56,124,132,133,134,135,136,],[95,-49,-50,-47,-42,-43,-44,-45,-46,]),'EQUALS':([54,55,56,124,132,133,134,135,136,],[96,-49,-50,-47,-42,-43,-44,-45,-46,]),'NOT_EQUALS':([54,55,56,124,132,133,134,135,136,],[97,-49,-50,-47,-42,-43,-44,-45,-46,]),'PLUS':([54,55,56,72,90,124,126,127,128,129,130,131,132,133,134,135,136,189,],[98,-49,-50,98,98,-47,98,98,98,98,98,98,-42,-43,-44,-45,-46,98,]),'MINUS':([54,55,56,72,90,124,126,127,128,129,130,131,132,133,134,135,136,189,],[99,-49,-50,99,99,-47,99,99,99,99,99,99,-42,-43,-44,-45,-46,99,]),'TIMES':([54,55,56,72,90,124,126,127,128,129,130,131,132,133,134,135,136,189,],[100,-49,-50,100,100,-47,100,100,100,100,100,100,100,100,-44,-45,-46,100,]),'DIVIDE':([54,55,56,72,90,124,126,127,128,129,130,131,132,133,134,135,136,189,],[101,-49,-50,101,101,-47,101,101,101,101,101,101,101,101,-44,-45,-46,101,]),'MODULE':([54,55,56,72,90,124,126,127,128,129,130,131,132,133,134,135,136,189,],[102,-49,-50,102,102,-47,102,102,102,102,102,102,102,102,-44,-45,-46,102,]),'COMMA':([58,79,83,89,106,107,108,109,110,111,112,113,114,115,116,117,160,161,162,164,],[105,105,105,105,-92,141,-63,-37,-38,-39,-40,-41,143,141,-65,-63,-91,-62,-64,-66,]),'AND':([84,87,88,122,148,149,193,],[120,-54,-55,-53,-51,120,120,]),'OR':([84,87,88,122,148,149,193,],[121,-54,-55,-53,-51,-52,121,]),'RSQUARE':([107,108,109,110,111,112,113,161,],[140,-63,-37,-38,-39,-40,-41,-62,]),'COLON':([109,110,111,112,113,117,163,184,186,],[-37,-38,-39,-40,-41,145,145,195,196,]),'RBRACE':([109,110,111,112,113,114,115,116,117,151,156,157,159,161,162,164,165,166,167,169,170,171,173,174,175,178,182,183,185,197,198,199,202,204,],[-37,-38,-39,-40,-41,142,144,-65,-63,177,-82,-78,187,-62,-64,-66,188,-93,-94,190,-95,-96,192,-97,-98,-8,194,-77,-81,-99,-100,-101,-80,-79,]),'CASE':([137,156,157,183,204,],[158,158,-78,-77,-79,]),'RETURN':([146,147,150,],[168,172,176,]),'DEFAULT':([156,157,183,204,],[184,-78,-77,-79,]),'BREAK':([178,201,],[-8,203,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'main_func':([0,],[2,]),'statements':([7,],[9,]),'statement':([7,9,],[10,33,]),'var_declaration':([7,9,125,138,146,147,150,195,196,],[11,11,152,152,152,152,152,152,152,]),'func_declaration':([7,9,],[12,12,]),'control_structure':([7,9,],[13,13,]),'var_declaration_num':([7,9,125,138,146,147,150,195,196,],[14,14,14,14,14,14,14,14,14,]),'var_declaration_string':([7,9,125,138,146,147,150,195,196,],[15,15,15,15,15,15,15,15,15,]),'var_declaration_bool':([7,9,125,138,146,147,150,195,196,],[16,16,16,16,16,16,16,16,16,]),'func_declaration_num':([7,9,],[17,17,]),'func_declaration_str':([7,9,],[18,18,]),'func_declaration_bool':([7,9,],[19,19,]),'func_declaration_void':([7,9,],[20,20,]),'if_structure':([7,9,],[21,21,]),'switch_structure':([7,9,],[22,22,]),'type_num':([7,9,125,138,146,147,150,195,196,],[23,23,153,153,153,153,153,153,153,]),'type_str':([7,9,125,138,146,147,150,195,196,],[24,24,154,154,154,154,154,154,154,]),'type_bool':([7,9,125,138,146,147,150,195,196,],[25,25,155,155,155,155,155,155,155,]),'condition':([43,44,],[53,57,]),'num_expression':([43,44,46,52,92,93,94,95,96,97,98,99,100,101,102,168,],[54,54,72,90,126,127,128,129,130,131,132,133,134,135,136,189,]),'params':([45,47,49,51,],[58,79,83,89,]),'type':([45,47,49,51,105,],[59,59,59,59,139,]),'data_structure':([46,48,50,],[73,81,85,]),'list_structure':([46,48,50,],[74,74,74,]),'map_structure':([46,48,50,],[75,75,75,]),'set_structure':([46,48,50,],[76,76,76,]),'str_expression':([48,172,],[80,191,]),'bool_expression':([50,86,120,121,176,],[84,122,148,149,193,]),'elements':([77,78,],[107,115,]),'value':([77,78,141,143,145,],[108,117,161,163,164,]),'key_value_pairs':([78,],[114,]),'key_value':([78,143,],[116,162,]),'basic_statement':([125,138,146,147,150,195,196,],[151,159,167,171,175,200,201,]),'cases':([137,],[156,]),'case':([137,156,],[157,183,]),'function_statment_num':([146,],[165,]),'return_statment_num':([146,],[166,]),'function_statment_str':([147,],[169,]),'return_statment_string':([147,],[170,]),'function_statment_bool':([150,],[173,]),'return_statment_bool':([150,],[174,]),'default':([156,],[182,]),'empty':([156,],[185,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> main_func','program',1,'p_program','AnalizadorSintactico.py',16),
  ('main_func -> VOID MAIN LPAREN RPAREN LBRACE statements','main_func',6,'p_main_func','AnalizadorSintactico.py',20),
  ('statements -> statements statement','statements',2,'p_statements','AnalizadorSintactico.py',25),
  ('statements -> statement','statements',1,'p_statements','AnalizadorSintactico.py',26),
  ('statement -> var_declaration SEMICOLON','statement',2,'p_statement','AnalizadorSintactico.py',35),
  ('statement -> func_declaration SEMICOLON','statement',2,'p_statement','AnalizadorSintactico.py',36),
  ('statement -> control_structure','statement',1,'p_statement','AnalizadorSintactico.py',37),
  ('basic_statement -> var_declaration SEMICOLON','basic_statement',2,'p_basicStament','AnalizadorSintactico.py',41),
  ('var_declaration -> var_declaration_num','var_declaration',1,'p_var_declaration','AnalizadorSintactico.py',47),
  ('var_declaration -> var_declaration_string','var_declaration',1,'p_var_declaration','AnalizadorSintactico.py',48),
  ('var_declaration -> var_declaration_bool','var_declaration',1,'p_var_declaration','AnalizadorSintactico.py',49),
  ('var_declaration_num -> type_num VARIABLE ASSIGN num_expression','var_declaration_num',4,'p_var_declarationNumeric','AnalizadorSintactico.py',53),
  ('var_declaration_num -> type_num VARIABLE ASSIGN data_structure','var_declaration_num',4,'p_var_declarationNumeric','AnalizadorSintactico.py',54),
  ('var_declaration_num -> type_num VARIABLE','var_declaration_num',2,'p_var_declarationNumeric','AnalizadorSintactico.py',55),
  ('var_declaration_string -> type_str VARIABLE ASSIGN str_expression','var_declaration_string',4,'p_var_declarationString','AnalizadorSintactico.py',62),
  ('var_declaration_string -> type_str VARIABLE ASSIGN data_structure','var_declaration_string',4,'p_var_declarationString','AnalizadorSintactico.py',63),
  ('var_declaration_string -> type_str VARIABLE','var_declaration_string',2,'p_var_declarationString','AnalizadorSintactico.py',64),
  ('var_declaration_bool -> type_bool VARIABLE ASSIGN bool_expression','var_declaration_bool',4,'p_var_declarationBool','AnalizadorSintactico.py',71),
  ('var_declaration_bool -> type_bool VARIABLE ASSIGN data_structure','var_declaration_bool',4,'p_var_declarationBool','AnalizadorSintactico.py',72),
  ('var_declaration_bool -> type_bool VARIABLE','var_declaration_bool',2,'p_var_declarationBool','AnalizadorSintactico.py',73),
  ('type_num -> DOUBLE','type_num',1,'p_type_num','AnalizadorSintactico.py',81),
  ('type_num -> INTEGER','type_num',1,'p_type_num','AnalizadorSintactico.py',82),
  ('type_str -> STRING','type_str',1,'p_type_String','AnalizadorSintactico.py',86),
  ('type_bool -> BOOL','type_bool',1,'p_type_Bool','AnalizadorSintactico.py',90),
  ('type -> STRING','type',1,'p_type','AnalizadorSintactico.py',96),
  ('type -> LIST','type',1,'p_type','AnalizadorSintactico.py',97),
  ('type -> SET','type',1,'p_type','AnalizadorSintactico.py',98),
  ('type -> MAP','type',1,'p_type','AnalizadorSintactico.py',99),
  ('type -> STACK','type',1,'p_type','AnalizadorSintactico.py',100),
  ('type -> QUEUE','type',1,'p_type','AnalizadorSintactico.py',101),
  ('type -> TREE','type',1,'p_type','AnalizadorSintactico.py',102),
  ('type -> GRAPH','type',1,'p_type','AnalizadorSintactico.py',103),
  ('type -> DOUBLE','type',1,'p_type','AnalizadorSintactico.py',104),
  ('type -> INTEGER','type',1,'p_type','AnalizadorSintactico.py',105),
  ('type -> BOOL','type',1,'p_type','AnalizadorSintactico.py',106),
  ('type -> VAR_TYPE','type',1,'p_type','AnalizadorSintactico.py',107),
  ('value -> STRING_LITERAL','value',1,'p_value','AnalizadorSintactico.py',112),
  ('value -> NUMBER','value',1,'p_value','AnalizadorSintactico.py',113),
  ('value -> FLOAT','value',1,'p_value','AnalizadorSintactico.py',114),
  ('value -> TRUE','value',1,'p_value','AnalizadorSintactico.py',115),
  ('value -> FALSE','value',1,'p_value','AnalizadorSintactico.py',116),
  ('num_expression -> num_expression PLUS num_expression','num_expression',3,'p_num_expression_binop','AnalizadorSintactico.py',121),
  ('num_expression -> num_expression MINUS num_expression','num_expression',3,'p_num_expression_binop','AnalizadorSintactico.py',122),
  ('num_expression -> num_expression TIMES num_expression','num_expression',3,'p_num_expression_binop','AnalizadorSintactico.py',123),
  ('num_expression -> num_expression DIVIDE num_expression','num_expression',3,'p_num_expression_binop','AnalizadorSintactico.py',124),
  ('num_expression -> num_expression MODULE num_expression','num_expression',3,'p_num_expression_binop','AnalizadorSintactico.py',125),
  ('num_expression -> LPAREN num_expression RPAREN','num_expression',3,'p_num_expression_binop','AnalizadorSintactico.py',126),
  ('str_expression -> STRING_LITERAL','str_expression',1,'p_str_expression_value','AnalizadorSintactico.py',130),
  ('num_expression -> NUMBER','num_expression',1,'p_num_expression_value','AnalizadorSintactico.py',134),
  ('num_expression -> FLOAT','num_expression',1,'p_num_expression_value','AnalizadorSintactico.py',135),
  ('bool_expression -> bool_expression AND bool_expression','bool_expression',3,'p_bool_expression_binop','AnalizadorSintactico.py',140),
  ('bool_expression -> bool_expression OR bool_expression','bool_expression',3,'p_bool_expression_binop','AnalizadorSintactico.py',141),
  ('bool_expression -> NEGATION bool_expression','bool_expression',2,'p_bool_expression_negation','AnalizadorSintactico.py',145),
  ('bool_expression -> TRUE','bool_expression',1,'p_bool_expression_value','AnalizadorSintactico.py',149),
  ('bool_expression -> FALSE','bool_expression',1,'p_bool_expression_value','AnalizadorSintactico.py',150),
  ('data_structure -> list_structure','data_structure',1,'p_data_structure','AnalizadorSintactico.py',155),
  ('data_structure -> map_structure','data_structure',1,'p_data_structure','AnalizadorSintactico.py',156),
  ('data_structure -> set_structure','data_structure',1,'p_data_structure','AnalizadorSintactico.py',157),
  ('list_structure -> LSQUARE elements RSQUARE','list_structure',3,'p_list_structure','AnalizadorSintactico.py',162),
  ('map_structure -> LBRACE key_value_pairs RBRACE','map_structure',3,'p_map_structure','AnalizadorSintactico.py',167),
  ('set_structure -> LBRACE elements RBRACE','set_structure',3,'p_set_structure','AnalizadorSintactico.py',171),
  ('elements -> elements COMMA value','elements',3,'p_elements','AnalizadorSintactico.py',175),
  ('elements -> value','elements',1,'p_elements','AnalizadorSintactico.py',176),
  ('key_value_pairs -> key_value_pairs COMMA key_value','key_value_pairs',3,'p_key_value_pairs','AnalizadorSintactico.py',184),
  ('key_value_pairs -> key_value','key_value_pairs',1,'p_key_value_pairs','AnalizadorSintactico.py',185),
  ('key_value -> value COLON value','key_value',3,'p_key_value','AnalizadorSintactico.py',193),
  ('control_structure -> if_structure','control_structure',1,'p_control_structure','AnalizadorSintactico.py',201),
  ('control_structure -> switch_structure','control_structure',1,'p_control_structure','AnalizadorSintactico.py',202),
  ('if_structure -> IF LPAREN condition RPAREN LBRACE basic_statement RBRACE','if_structure',7,'p_if','AnalizadorSintactico.py',207),
  ('switch_structure -> SWITCH LPAREN condition RPAREN LBRACE cases default RBRACE','switch_structure',8,'p_switch','AnalizadorSintactico.py',212),
  ('condition -> num_expression GREATER_THAN num_expression','condition',3,'p_condition','AnalizadorSintactico.py',216),
  ('condition -> num_expression LESS_THAN num_expression','condition',3,'p_condition','AnalizadorSintactico.py',217),
  ('condition -> num_expression GREATER_EQ num_expression','condition',3,'p_condition','AnalizadorSintactico.py',218),
  ('condition -> num_expression LESS_EQ num_expression','condition',3,'p_condition','AnalizadorSintactico.py',219),
  ('condition -> num_expression EQUALS num_expression','condition',3,'p_condition','AnalizadorSintactico.py',220),
  ('condition -> num_expression NOT_EQUALS num_expression','condition',3,'p_condition','AnalizadorSintactico.py',221),
  ('cases -> cases case','cases',2,'p_cases','AnalizadorSintactico.py',226),
  ('cases -> case','cases',1,'p_cases','AnalizadorSintactico.py',227),
  ('case -> CASE NUMBER COLON basic_statement BREAK SEMICOLON','case',6,'p_case','AnalizadorSintactico.py',234),
  ('default -> DEFAULT COLON basic_statement SEMICOLON','default',4,'p_default','AnalizadorSintactico.py',238),
  ('default -> empty','default',1,'p_default','AnalizadorSintactico.py',239),
  ('empty -> <empty>','empty',0,'p_empty','AnalizadorSintactico.py',246),
  ('func_declaration -> func_declaration_num SEMICOLON','func_declaration',2,'p_func_declaration','AnalizadorSintactico.py',260),
  ('func_declaration -> func_declaration_str SEMICOLON','func_declaration',2,'p_func_declaration','AnalizadorSintactico.py',261),
  ('func_declaration -> func_declaration_bool SEMICOLON','func_declaration',2,'p_func_declaration','AnalizadorSintactico.py',262),
  ('func_declaration -> func_declaration_void SEMICOLON','func_declaration',2,'p_func_declaration','AnalizadorSintactico.py',263),
  ('func_declaration_num -> type_num VARIABLE LPAREN params RPAREN LBRACE function_statment_num RBRACE','func_declaration_num',8,'p_func_declaration_num','AnalizadorSintactico.py',266),
  ('func_declaration_str -> type_str VARIABLE LPAREN params RPAREN LBRACE function_statment_str RBRACE','func_declaration_str',8,'p_func_declaration_str','AnalizadorSintactico.py',271),
  ('func_declaration_bool -> type_bool VARIABLE LPAREN params RPAREN LBRACE function_statment_bool RBRACE','func_declaration_bool',8,'p_func_declaration_bool','AnalizadorSintactico.py',277),
  ('func_declaration_void -> VOID VARIABLE LPAREN params RPAREN LBRACE basic_statement RBRACE','func_declaration_void',8,'p_func_declaration_void','AnalizadorSintactico.py',281),
  ('params -> params COMMA type VARIABLE','params',4,'p_params','AnalizadorSintactico.py',285),
  ('params -> type VARIABLE','params',2,'p_params','AnalizadorSintactico.py',286),
  ('function_statment_num -> return_statment_num','function_statment_num',1,'p_function_statment_num','AnalizadorSintactico.py',291),
  ('function_statment_num -> basic_statement','function_statment_num',1,'p_function_statment_num','AnalizadorSintactico.py',292),
  ('function_statment_str -> return_statment_string','function_statment_str',1,'p_function_statment_str','AnalizadorSintactico.py',295),
  ('function_statment_str -> basic_statement','function_statment_str',1,'p_function_statment_str','AnalizadorSintactico.py',296),
  ('function_statment_bool -> return_statment_bool','function_statment_bool',1,'p_function_statment_bool','AnalizadorSintactico.py',299),
  ('function_statment_bool -> basic_statement','function_statment_bool',1,'p_function_statment_bool','AnalizadorSintactico.py',300),
  ('return_statment_num -> RETURN num_expression SEMICOLON','return_statment_num',3,'p_return_statment_num','AnalizadorSintactico.py',304),
  ('return_statment_string -> RETURN str_expression SEMICOLON','return_statment_string',3,'p_return_statment_string','AnalizadorSintactico.py',307),
  ('return_statment_bool -> RETURN bool_expression SEMICOLON','return_statment_bool',3,'p_return_statment_bool','AnalizadorSintactico.py',310),
]
